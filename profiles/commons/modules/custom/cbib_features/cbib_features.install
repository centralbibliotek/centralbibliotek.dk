<?php

/**
 * @file
 * Install, update and uninstall functions for the cbib_features module.
 */

/**
 * Implements hook_install().
 */
function cbib_features_install() {
  drupal_register_shutdown_function('_cbib_features_fix_collations');
  drupal_register_shutdown_function('_cbib_features_delete_install_profile_first_group');
  drupal_register_shutdown_function('_cbib_features_enable_cb_theme');
}

/**
 * Enable cb theme.
 */
function _cbib_features_enable_cb_theme() {
  theme_enable(array('cb'));

  // Set the default theme.
  variable_set('theme_default', 'cb');
}

/**
 * Delete the first group created by the install profile.
 */
function _cbib_features_delete_install_profile_first_group() {
  $nodes = node_load_multiple(array(), array('type' => 'group', 'title' => 'Engineering team'));
  if (!empty($nodes)) {
    $node = current($nodes);
    if (!empty($node->nid)) {
      node_delete($node->nid);
    }
  }
}

/**
 * Implements hook_schema_alter().
 *
 * Define collation on title fields and cache tables.
 */
function cbib_features_schema_alter(&$schema) {
  // Define Danish collation on {field_data_title_field} to sort Aalborg last.
  $schema['field_data_title_field']['collation'] = 'utf8_danish_ci';

  // Define utf8_bin as collation on cache tables for better performance.
  foreach ($schema as $table => $info) {
    if (preg_match('/^cache.*/', $table)) {
      $schema[$table]['collation'] = 'utf8_bin';
    }
  }
}

/**
 * Fix collation of {field_data_title_field} and cache tables.
 */
function _cbib_features_fix_collations() {
  // Set utf8_bin as collation on cache tables for better performance.
  $schema = drupal_get_schema(NULL, TRUE);
  foreach ($schema as $table => $info) {
    if (preg_match('/^cache.*/', $table)) {
      collation_fixer_fix_collation($table);
    }
  }

  // Set Danish collation on {field_data_title_field} to sort Aalborg last.
  if (!empty($schema['field_data_title_field'])) {
    collation_fixer_fix_collation('field_data_title_field');
  }
}

/**
 * Fix collation of {field_data_title_field} and cache tables.
 */
function cbib_features_update_7101(&$sandbox) {
  _cbib_features_fix_collations();
}

/**
 * Enable Features Override module.
 */
function cbib_features_update_7102(&$sandbox) {
  if (!module_exists('features_override')) {
    module_enable(array('features_override'));
  }
}

/**
 * Enable Chosen module.
 */
function cbib_features_update_7103(&$sandbox) {
  if (!module_exists('chosen')) {
    module_enable(array('chosen'));
  }
}

/**
 * Enable Cbib Commons Events features override module.
 */
function cbib_features_update_7104(&$sandbox) {
  if (!module_exists('cbib_commons_events')) {
    module_enable(array('cbib_commons_events'));
  }
}

/**
 * Clean up old and unused node url aliases.
 */
function cbib_features_update_7105(&$sandbox) {
  // Find all non-broken node aliases.
  $subquery = db_select('url_alias', 'su')
    ->fields('su', array('pid'));
  $subquery->join('node', 'n');
  $subquery->where("su.source = CONCAT('node/', n.nid)");

  // Find broken node aliases.
  $pids = db_select('url_alias', 'u')
    ->fields('u', array('pid'))
    ->condition('u.pid', $subquery, 'NOT IN')
    ->condition('u.source', 'node/%', 'LIKE')
    ->execute()
    ->fetchCol();

  if ($pids) {
    // Delete the broken node aliases.
    db_delete('url_alias')
      ->condition('pid', $pids, 'IN')
      ->execute();
  }

  watchdog('cbib_features', 'Found and deleted @pids broken url node aliases', array('@pids' => count($pids)), WATCHDOG_INFO);
}
