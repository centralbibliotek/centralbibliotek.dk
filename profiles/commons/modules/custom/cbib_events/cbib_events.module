<?php
/**
 * @file
 * Code for the Cbib Events feature.
 */

include_once 'cbib_events.features.inc';

/**
 * @file
 * Centralbibliotek.dk event stuff.
 */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function cbib_events_ctools_plugin_directory($module, $plugin) {
  if (($module == 'ctools' || $module == 'panels') && ($plugin == 'content_types')) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function cbib_events_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($router_item['path'] == 'node/%/registrations' || $router_item['tab_parent'] == 'node/%/registrations') {
    $data['tabs'][1]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Download registrants'),
        'href' => 'node/' . $router_item['original_map'][1] . '/registrations/deltagere.csv',
        'localized_options' => array(
          'attributes' => array(
            'title' => t('Download'),
          ),
        ),
      ),
    );
  }
}


/**
 * Implements hook_form_FORM_ID_alter() for event_node_form().
 */
function cbib_events_form_event_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_registration_date']['und'][0]['#title'] = 'Tilmelding Ã¥bner';
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'cbib_events') . '/css/node-edit.css',
  );

  // We exchange the submit handler in Commons Events
  // (commons_events_node_form_submit()) with our own variant. We have removed
  // the 'Automatically register the node creator for the event' part.
  $delta = array_search('commons_events_node_form_submit', $form['#submit']);
  if ($delta !== FALSE) {
    $form['#submit'][$delta] = 'cbib_events_node_form_submit';
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * We ensure that our form_alter is added before Commons Events' form_alter by
 * altering the hook order.
 */
function cbib_events_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['cbib_events']) && isset($implementations['commons_events'])) {
    unset($implementations['cbib_events']);
    $implementations['cbib_events'] = FALSE;
  }
}

/**
 * Custom node form submit handler.
 *
 * This is a variation of the submit handler in Commons Events
 * (commons_events_node_form_submit()). We have removed the 'Automatically
 * register the node creator for the event' part.
 *
 * The submit handler is added in cbib_events_form_event_node_form_alter().
 *
 * We ensure that the above form_alter is added before Commons Events'
 * form_alter by altering the hook order in
 * cbib_events_module_implements_alter().
 *
 * @see commons_events_node_form_submit()
 * @see cbib_events_form_event_node_form_alter()
 * @see cbib_events_module_implements_alter()
 */
function cbib_events_node_form_submit($form, $form_state) {
  $node = $form_state['node'];
  $language = (isset($form_state['language']) ? $form_state['language'] : LANGUAGE_NONE);

  if (isset($node->nid)) {
    $settings = registration_entity_settings('node', $node->nid);
    $settings['status'] = (int) $form_state['values']['field_status'];

    if ($form_state['values']['field_registration_type'][$language]['0']['value'] == 'external') {
      $settings['status'] = 0;
    }

    if (!empty($form_state['values']['field_number_of_attendees'][$language]['0']['value']) && is_numeric($form_state['values']['field_number_of_attendees'][$language]['0']['value'])) {
      $settings['capacity'] = (int) $form_state['values']['field_number_of_attendees'][$language]['0']['value'];
    }

    $settings['settings'] = serialize($settings['settings']);
    registration_update_entity_settings('node', $node->nid, $settings);
  }
}
