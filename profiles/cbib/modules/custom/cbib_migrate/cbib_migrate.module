<?php

/**
 * This is example code for a Drupal 6 to Drupal 7 migration. This won't actually
 * work without defining the referenced vocabularies, content types, and fields
 * on each side.
 */

/**
 * Implements hook_flush_caches().
 */
function cbib_migrate_flush_caches() {
  cbib_migrate_register_migrations();
}

/**
 * Register all migrations.
 *
 * @return void.
 */
function cbib_migrate_register_migrations() {
  // Define how we are getting the data for the migration. Legacy connector
  // from settings.php and 6 as major Drupal version.
  $common_arguments = array(
    'source_connection' => 'legacy',
    'source_version' => 6,
  );

  $migrations = cbib_migrate_get_all_migrations();

  // Register all the migrations.
  foreach ($migrations as $migration) {
    Migration::registerMigration($migration['class'], $migration['machine_name'], $common_arguments + $migration['arguments']);
  }
}

/**
 * Deregister all migrations.
 *
 * @return void.
 */
function cbib_migrate_deregister_migrations() {
  $migrations = cbib_migrate_get_all_migrations();

  // Deregister all the migrations.
  foreach ($migrations as $migration) {
    Migration::deregisterMigration($migration['machine_name']);
  }
}

/**
 * Get an array of all migrations. The returned migrations array
 * has the following keys:
 *   class: The name of the migration class.
 *   arguments: The arguments for the migration.
 *   machine_name: The machine name of the migration.
 *
 * @return Array of migrations as described above.
 */
function cbib_migrate_get_all_migrations() {
  return array_merge(
    // Get migrations for users.
    cbib_migrate_get_user_migrations(),

    // Get migrations for files.
    cbib_migrate_get_file_migrations(),

    // Get migrations for images (Billedefil/media -> Billede).
    cbib_migrate_get_image_migrations(),

    // Get migrations for central libraries (Centralbibliotek/library -> Centralbibliotek/centralbibliotek).
    cbib_migrate_get_central_library_migrations(),

    // Get migrations for user profiles.
    cbib_migrate_get_profile_migrations(),

    // Get migrations for groups (Gruppe/group -> Gruppe/group).
    cbib_migrate_get_group_migrations(),

    // Get migrations for events (Arrangement/event -> Begivenhed/event).
    cbib_migrate_get_event_migrations(),

    // Get migrations for documents (Gruppefil/group_file -> Dokument/document).
    cbib_migrate_get_document_migrations(),

    // Get migrations for posts (Gruppenyhed/group_news -> Indlæg/post).
    cbib_migrate_get_post_migrations(),

    // Get migrations for news items (Nyhed/newsitem -> Nyhed/news).
    cbib_migrate_get_news_item_migrations(),

    // Get migrations for pages (Tekstside/textpage -> Site/page).
    cbib_migrate_get_page_migrations()
  );
}

/**
 * Implements hook_migrate_api().
 */
function cbib_migrate_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}

/**
 * Get migrations for users and their profile nodes.
 *
 * @return Array containing the arguments of the migration ('arguments' array key)
 *   and the class that handles the migration ('class' array key).
 */
function cbib_migrate_get_user_migrations() {
  $migrations = array();

  $migrations[] = array(
    'machine_name' => 'role',
    'class' => 'DrupalRole6Migration',
    'arguments' => array(
      'group' => 'user',
      'description' => t('Migration of roles from Centralbibliotek.dk'),
      'role_mappings' => array(
        'Biblioteksadmin' => 'content moderator',
      ),
    ),
  );

  $migrations[] = array(
    'machine_name' => 'user',
    'class' => 'CbibUserMigration',
    'arguments' => array(
      'group' => 'user',
      'description' => t('Migration of users from Centralbibliotek.dk'),
      'role_migration' => 'role',
    ),
  );

  return $migrations;
}

/**
 * Get migrations for files.
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_file_migrations() {
  $migrations = array();

  $migrations[] = array(
    'machine_name' => 'file',
    'class' => 'DrupalFile6Migration',
    'arguments' => array(
      'group' => 'file',
      'description' => t('Migration of files from Centralbibliotek.dk'),
      'user_migration' => 'user',
      'default_uid' => 1,
      'source_dir' => getcwd() . "/old/",
      'destination_dir' => 'public://legacy',
      'dependencies' => array('user'),
    ),
  );

  return $migrations;
}

/**
 * Get migrations for images (Billedefil/media -> Billede).
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_image_migrations() {
  $migrations = array();

  // We will leave this for now. Let's see if it required.

  return $migrations;
}

/**
 * Get migrations for central libraries (Centralbibliotek/library -> Centralbibliotek/centralbibliotek).
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_central_library_migrations() {
  $migrations = array();

  $central_library_migration = array(
  );

  $migrations[] = array(
    'machine_name' => 'central_library',
    'class' => 'CbibCentralLibraryMigration',
    'arguments' => array(
      'group' => 'central_library',
      'description' => t('Migration of central library nodes from Centralbibliotek.dk'),
      'source_type' => 'library',
      'destination_type' => 'centralbibliotek',
      'user_migration' => 'user',
      'dependencies' => array('user'),
    ),
  );

  return $migrations;
}

/**
 * Get migrations for profiles.
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_profile_migrations() {
  $migrations = array();

  return $migrations;
}

/**
 * Get migrations for groups (Gruppe/group -> Gruppe/group).
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_group_migrations() {
  $migrations = array();

  return $migrations;
}

/**
 * Get migrations for events (Arrangement/event -> Begivenhed/event).
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_event_migrations() {
  $migrations = array();

  return $migrations;
}

/**
 * Get migrations for documents (Gruppefil/group_file -> Dokument/document).
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_document_migrations() {
  $migrations = array();

  return $migrations;
}

/**
 * Get migrations for posts (Gruppenyhed/group_news -> Indlæg/post).
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_post_migrations() {
  $migrations = array();

  return $migrations;
}

/**
 * Get migrations for news items (Nyhed/newsitem -> Nyhed/news).
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_news_item_migrations() {
  $migrations = array();

  return $migrations;
}

/**
 * Get migrations for pages (Tekstside/textpage -> Site/page).
 *
 * @see cbib_migrate_get_user_migrations().
 */
function cbib_migrate_get_page_migrations() {

  $migrations = array();

  return $migrations;
}

/**
 * Convert a string to a number during migration.
 *
 * @param $text
 *   The text to convert.
 * @return The integer converted to or NULL for empty.
 */
function cbib_migrate_convert_to_number($text) {
  // Remove spaces.
  $trimmed_text = str_replace(' ', '', $text);

  // Allow empty value.
  if (empty($trimmed_text)) {
    return NULL;
  }

  // Fail if end value is not numeric
  if (!is_numeric($trimmed_text)) {
    cbib_migrate_register_message("Received value was not numeric. Value: " . $text, Migration::MESSAGE_WARNING);
    return NULL;
  }

  // If we end up here, it is numeric. Cast and return.
  return (int)$trimmed_text;
}

/**
 * Register message in migration.
 *
 * @param $message
 *   The message to register.
 * @param $level
 *   The level as defined in Migration class.
 *   Defaults to Migration::MESSAGE_ERROR.
 * @return void.
 */
function cbib_migrate_register_message($message, $level = Migration::MESSAGE_ERROR) {
  $migration = Migration::currentMigration();

  $migration->queueMessage($message, $level);
}

/**
 * Convert text to link. Save a message if the text is not a link.
 *
 * @param $text
 *   The text to convert.
 * @return Text that is a link, or NULL if input was not a link.
 */
function cbib_migrate_convert_to_link($text) {
  // Check if text is link
  if (preg_match('_^http(s?)://_', $text)) {
    return $text;
  }
  else {
    // Allow empty.
    if (strlen(trim($text)) > 0) {
      cbib_migrate_register_message('Text is not a link: ' . $text);
    }
    return NULL;
  }
}

/**
 * Register a mapping from a profile nid to a new uid.
 *
 * @param $nid
 *   The id of the profile node on the old system.
 * @param $uid
 *   The id of the new user.
 * @return void.
 */
function cbib_migrate_register_profile_mapping($nid, $uid) {
  $record = new StdClass();
  $record->nid = $nid;
  $record->uid = $uid;

  drupal_write_record('cbib_migrate_profile_map', $record);
}

/**
 * Lookup a mapping from a profile nid to a new user uid.
 *
 * @param $nid
 *   The id of the profile node.
 * @return The id of the new user.
 */
function cbib_migrate_lookup_profile_uid($nid) {
  $row = db_select('cbib_migrate_profile_map', 'm')
    ->condition('nid', $nid)
    ->fields('m', array('uid'))
    ->execute()
    ->fetch();

  return $row ? $row->uid : NULL;
}
