<?php
/*
 * Register any additonal routes required by the module.
 */
function  cbib_oc_hooks_menu() {
  $items = array();
  $items['admin/settings/cbib_oc_hooks'] = array(
    'title' => 'Cbib OC_Hooks config',
    'description' => 'Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oc_template_overwrites_admin'),
    'access arguments' => array('administer cbib_hooks'),
    'file' => 'cbib_oc_hooks.admin.inc',
    'type' => MENU_CALLBACK,
   );
  
  return system_settings_form($items);
}
/**
 * Implements hook_permission().
 */
function cbib_oc_hooks_permission() {
  return array(
    'administer cbib_hooks' => array(
      'title' => t('Administrer digitalpost'),
      'description' => t('Giver adgang til configuere digitalpost'),
    )
  );
}
/*
* Alter various forms.
 */

function cbib_oc_hooks_form_alter(&$form, &$form_state, $form_id)
{
    if($form_id == "user_register_form")
    {
        hide($form['actions']['submit']);
        $form['actions']['submit2']['#value'] = t("Send");
        $form['actions']['submit2']['#type'] = "submit";
    }
    if($form_id == "user_login")
    {
        //Added ability to referer to last page before login.
        $referer = $_SERVER['HTTP_REFERER'];
        $parsed = parse_url($referer, PHP_URL_PATH);
        if ($parsed != '/user/login') {
        $_SESSION['ref'] = $parsed;
        }
        $form['#submit'][] = 'cbib_oc_hooks_user_login_submit_handler';
    }
    if($form_id == "event_node_form")
    {
        drupal_add_js(drupal_get_path('module', 'cbib_oc_hooks') .'/js/end-date.js',array('weight' => 999));
    }
}
/*
 * Alter the posts form to allow titles in quick reply.
 */
function cbib_oc_hooks_form_commons_bw_partial_node_form_alter(&$form, &$form_state) {
    /*
     * Overwrite the commons settings for posts.
     * Allow title field to be trigger.
     */
    if (empty($form['#entity']) || $form['#entity']->type != 'post') {
        return;
    }    
    drupal_add_css(drupal_get_path('module', 'cbib_oc_hooks') . "/css/commons_posts_overwrites.css");
    
    // Set fields as hideable so the forms can be compacted.
    $form['title_field']['#attributes']['class'][] = 'trigger-field';
    foreach (array('body','field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
      if (isset($form[$field])) {
        $form[$field]['#attributes']['class'][] = 'hideable-field';
      }
    }
}
/*
 * Function to keeps users on the page from which they click login.
 */
function cbib_oc_hooks_user_login_submit_handler($form, &$form_state) {
  if(isset($_SESSION['ref'])) {
      $current = $_SESSION['ref'];
      unset($_SESSION['ref']);
      drupal_goto(urldecode($current));
  }
  
  
}
/*
 * Function that allow us to prevent sending emails
 * when performing tests on the system.
 * can be controlled from the configuration form.
 */
function cbib_oc_hooks_mail_alter(&$message)
{
  // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
  // We can use variable_get() to get the $conf variable set in our settings.php file
  // Note that by setting the default to TRUE, the default setting for the system is to be
  // a development environment. Set this to FALSE to have the default be a live environment.
  if(variable_get('oc_hooks_prevent_email_dispatch', TRUE))
  {
    // First: Prevent the mail from being sent
    $message['send'] = FALSE;
 
    // Next: Log the mail so it can be debugged if necessary
    watchdog('Development Env', 'The following email was not sent: !message', array('!message' => '<pre>' . print_r($message, TRUE) . '</pre>'));
  }
}
