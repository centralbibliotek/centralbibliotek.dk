<?php
include_once "cbib_oc_hooks.admin.inc";
/*
 * Register any additonal routes required by the module.
 */
function  cbib_oc_hooks_menu() {
  $items = array();
  $items['admin/settings/cbib_oc_hooks'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Cbib OC_Hooks config',
    'description' => 'Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cbib_oc_hooks_admin'),
    'access arguments' => array('administer cbib_hooks'),
    'access callback' => TRUE,
   );
  
   $items['admin/settings/cbib_oc_hooks/js/summary'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'js_summary',
    'description' => 'creates summary of text recived and returns',
    'page callback' => 'cbib_oc_hooks_js_create_summary',
    'access arguments' => array('administer cbib_hooks'),
    'access callback' => TRUE,
   );
   
  $items['oc/user/autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'autocomplete with names + emails.',
    'description' => 'modified user autocomplete',
    'page callback' => 'cbib_oc_hooks_user_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
   );
   
    $items['group/%/%/admin/oc/resend'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Resend group notification.',
    'description' => 'send group notification',
    'page arguments' => array(1, 2),
    'page callback' => 'cbib_oc_hooks_og_resend_notifcation',
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('add user', 1, 2),
   );
   
  return $items;
}

function cbib_oc_hooks_menu_alter(&$items) {
         // entity local tasks
foreach (registration_get_registration_instances() as $instance) {
  $type = $instance['entity_type'];
  if (!in_array($type, array('registration', 'registration_type'))) {
      $items[$type . '/%entity_object/registrations']['access callback'] = 'cbib_oc_hooks_registration_administer_registrations_access';
      $items[$type . '/%entity_object/registrations/list']['access callback'] = 'cbib_oc_hooks_registration_administer_registrations_access';
      $items[$type . '/%entity_object/registrations/settings']['access callback'] = 'cbib_oc_hooks_registration_administer_registrations_access';
      $items[$type . '/%entity_object/registrations/broadcast']['access callback'] = 'cbib_oc_hooks_registration_administer_registrations_access';
    }
  }
 return $items;
}

function cbib_oc_hooks_registration_administer_registrations_access ($entity_type, $entity) {

  if (og_user_access('node', $entity->nid, 'administrator members')) {
    return TRUE;
  }
  $registration_type = registration_get_entity_registration_type($entity_type, $entity);
   if ($registration_type) {
  if (user_access("administer $registration_type registration")) { 
    return TRUE;
  }
  elseif (user_access("administer own $registration_type registration") && entity_access('update', $entity_type, $entity)) {
    return TRUE;
    }
  }
  return FALSE;
}


function cbib_oc_hooks_entity_info_alter (&$entities) {
   $entities['registration']['access callback'] = 'cbib_oc_hooks_registration_access';
   return $entities;
}

function cbib_oc_hooks_registration_access($op, Registration $registration = NULL, $account = NULL) {
  
   if (og_user_access('node', $registration->entity_id, 'administrator members')) {
      return TRUE;
   }

}


/**
 * Implements hook_permission().
 */
function cbib_oc_hooks_permission() {
  return array(
    'administer cbib_hooks' => array(
      'title' => t('Administrer digitalpost'),
      'description' => t('Giver adgang til configuere digitalpost'),
    )
  );
}
/*
* Alter various forms.
 */
function cbib_oc_hooks_form_alter(&$form, &$form_state, $form_id)
{
    if($form_id == "user_register_form")
    {
        hide($form['actions']['submit']);
        $form['actions']['submit2']['#value'] = t("Send");
        $form['actions']['submit2']['#type'] = "submit";
    }
    if($form_id == "user_login")
    {
        //Added ability to referer to last page before login.
        $referer = $_SERVER['HTTP_REFERER'];
        $parsed = parse_url($referer, PHP_URL_PATH);
        if ($parsed != '/user/login') {
        $_SESSION['ref'] = $parsed;
        }
        $form['#submit'][] = 'cbib_oc_hooks_user_login_submit_handler';
    }
    if($form_id == "event_node_form")
    {
        drupal_add_js(drupal_get_path('module', 'cbib_oc_hooks') .'/js/end-date.js',array('weight' => 999));
        /*
         * JS to create live preview of summary.
         */
        drupal_add_js(array('cbib_oc_hooks' => array('summary_length' => variable_get('teaser_length', 600))), 'setting');
        drupal_add_js(drupal_get_path('module', 'cbib_oc_hooks') .'/js/oc_summary_preview.js');
        
        array_unshift($form['#validate'], "validate_online_adresses_fix");
    }
    if($form_id == "og_ui_add_users" && isset($form['og_user']['name']['#autocomplete_path']))
    {
        $form['og_user']['name']['#autocomplete_path'] = 'oc/user/autocomplete';
    }
    if($form_id == "news_node_form" || $form_id == "event_node_form" || $form_id == "library_node_form"
        || $form_id == "centralbibliotek_node_form" || $form_id == "group_node_form" || $form_id == "license_node_form"
        || $form_id == "licenses_node_form" || $form_id == "page_node_form" || $form_id == "document_node_form"
        || $form_id == "post_node_form")
    {
      // Add checkbox option
       $form['options']['gensend_notifcation'] = array(
        '#type' => 'checkbox',
        '#title' => t('Genudsend notifcation'),
        '#default_value' => 0,
      );
    }
}
function validate_online_adresses_fix(&$form,&$form_state)
{
    if($form_state['values']['field_location']['und'][0]['value'] == 'online')
    {
        // $form_state['values']['field_address']['und'][0]['country'] = "";
        //$form_state['values']['field_address']['und'][0]['postal_code'] = "";
        //$form_state['values']['field_address']['und'][0]['locality'] = "";
        //$form_state['values']['field_address']['und'][0]['thoroughfare'] = "";
    }
    else
    {
        /*
         * Adresse information is required
         */
        /*if(empty($form_state['values']['field_address']['und'][0]['street_block']['thoroughfare']))
        {
            form_set_error('field_address][' . LANGUAGE_NONE . '][0]["street_block"][thoroughfare', 'Adresse er påkrævet.');
        }
        if(empty($form_state['values']['field_address']['und'][0]["locality_block"]['locality']))
        {
            form_set_error('field_address][' . LANGUAGE_NONE . '][0]["locality_block"][locality', 'By er påkrævet.');
        }
        if(empty($form_state['values']['field_address']['und'][0]["locality_block"]['postal_code']))
        {
            form_set_error('field_address][' . LANGUAGE_NONE . '][0]["locality_block"][postal_code', 'Postnr er påkrævet.');
        }*/
    }
}
/**
 * Implements hook_form_BASE_FORM_ID_alter
 */
  function cbib_oc_hooks_form_node_form_alter(&$form, $form_state) {
    
  // if you are targeting a specific content type then 
  // you can access the type:
  $type = $form['#node']->type;

 // Alter the posts form to allow titles in quick reply.
 
  if ($type == 'document') {
    unset($form['field_formidling_og_pr']);
  }
  
}

/**
 * Implements hook_user_insert
 */
function cbib_oc_hooks_user_insert(&$edit, $account, $category) {
  $nid = $edit['field_f_lg_centralbibliotek']['und'];
  foreach ($nid as $id) {
    commons_follow_node_follow_node($id['target_id'], 'centralbibliotek', $account->uid);
  }
}
function cbib_oc_hooks_user_presave(&$edit, $account, $category)
{
   /*
   * Asign user a cbib based on his library location
   */
  if(isset($edit['field_library']['und'][0]['target_id']))
  {
      $library = node_load($edit['field_library']['und'][0]['target_id']);
      $cbib_ref_id = isset($library->field_centralbibliotek_ref['und'][0]['target_id']) ? $library->field_centralbibliotek_ref['und'][0]['target_id'] : null;
      if($cbib_ref_id != null)
      {
        $edit['field_centralbibliotek_ref']['und'][0]['target_id'] = $cbib_ref_id;
      }
  }
}
function cbib_oc_hooks_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
    hide($form['field_centralbibliotek_ref']);
}
/*
 * Alter the posts form to allow titles in quick reply.
 */
function cbib_oc_hooks_form_commons_bw_partial_node_form_alter(&$form, &$form_state) {
    /*
     * Overwrite the commons settings for posts.
     * Allow title field to be trigger.
     */
    if (empty($form['#entity']) || $form['#entity']->type != 'post') {
        return;
    }    
    drupal_add_css(drupal_get_path('module', 'cbib_oc_hooks') . "/css/commons_posts_overwrites.css");
    
    // Set fields as hideable so the forms can be compacted.
    $form['title_field']['#attributes']['class'][] = 'trigger-field';
    foreach (array('body','field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
      if (isset($form[$field])) {
        $form[$field]['#attributes']['class'][] = 'hideable-field';
      }
    }
}
/*
 * Function to keeps users on the page from which they click login.
 */
function cbib_oc_hooks_user_login_submit_handler($form, &$form_state) {
  if(isset($_SESSION['ref'])) {
      $current = $_SESSION['ref'];
      unset($_SESSION['ref']);
      drupal_goto(urldecode($current));
  }
  
  
}
/*
 * Function that allow us to prevent sending emails
 * when performing tests on the system.
 * can be controlled from the configuration form.
 */
function cbib_oc_hooks_mail_alter(&$message)
{
  // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
  // We can use variable_get() to get the $conf variable set in our settings.php file
  // Note that by setting the default to TRUE, the default setting for the system is to be
  // a development environment. Set this to FALSE to have the default be a live environment.
    if($message['to'] != "tfpet@odense.dk")
    {
        
    }
  if(variable_get('oc_hooks_prevent_email_dispatch', TRUE) && $message['to'] != "tfpet@odense.dk")
  {
    // First: Prevent the mail from being sent
    $message['send'] = FALSE;
 
    // Next: Log the mail so it can be debugged if necessary
    watchdog('Development Env', 'The following email was not sent: !message', array('!message' => '<pre>' . print_r($message, TRUE) . '</pre>'));
  }
}
/*
 * Custom callback function to create a live text summary.
 */
function cbib_oc_hooks_js_create_summary()
{
    echo text_summary($_GET['text'],null,300);
    drupal_exit();
}
/**
 * Implements hook_wysiwyg_plugin().
 *
 * @see hook_wysiwyg_plugin()
 */
function cbib_oc_hooks_ckeditor_plugin() {
  return array(
    'confighelper' => array(
      // Name of the plugin used to write it.
      'name' => 'confighelper',
      // Description of the plugin - it would be displayed in the plugins management section of profile settings.
      'desc' => t('Simplify the task of changing some behaviors of CKEditor'),
      // The full path to the CKEditor plugins directory, with the trailing slash.
      'path' => drupal_get_path('module', 'cbib_oc_hooks') . '/js/ckeditor/confighelper/'
    )
  );
}
/*
 * Overwriting user/autocomplete for commons autocompletion
 */
function cbib_oc_hooks_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $or = db_or();
    $or->condition('mail', db_like($string) . '%', 'LIKE');
    $or->condition('name', db_like($string) . '%', 'LIKE');
    $result = db_select('users')->fields('users', array('name','mail'))->condition($or)->range(0, 10)->execute();
    
    foreach ($result as $user) {
      $matches[$user->name] = check_plain($user->name) . " (" . check_plain($user->mail) . ")";
    }
  }
  drupal_json_output($matches);
}
/*
 * Modify OG group admin menu to allow resend of notifcations.
 */
function cbib_oc_hooks_og_ui_get_group_admin($group_type, $gid) {
    $items = array();
    if (og_user_access($group_type, $gid, 'manage members')) {
    $items['resend_notifcation'] = array(
      'title' => t('Resend notification'),
      'description' => t('Resends original creation notifcation ( this will notify all users on the site!!)'),
      'href' => "admin/oc/resend",
    );
  }
  
  return $items;
}
/*
 * Callback that handles triggering the resend of the notification for
 * node creation.
 */
function cbib_oc_hooks_og_resend_notifcation($entity_type,$node_id)
{
    $node = node_load($node_id);
    commons_notify_send_message_on_shutdown($node);
    drupal_set_message(t("Notification er blevet gensendt."));
    drupal_goto(url('node/'. $node->nid));
}
/*
 * Handle resending of news node notifications
 */
function cbib_oc_hooks_node_update($node)
{
    if($node->gensend_notifcation)
    {
       drupal_set_message(t("Notification er blevet gensendt."));
       drupal_register_shutdown_function('commons_notify_send_message_on_shutdown', $node);
    }
}
/*
 * View hooks
 */
function cbib_oc_hooks_views_pre_render(&$view)
{
    if($view->name == "centralbibliotek_license" && $view->current_display == "panel_pane_6")
    {
        $content = array();
        $target_group = node_load(127);
        $links = flag_link('node', $target_group,'page_manager');
        $header_options = array(
        'label' => t('Header text'), // Administrative label. Not really needed here.
        //'content' => $links['flag-commons_follow_group']['title'], // Content of header text.
            'content' => $links['flag-commons_follow_node']['title'], // Fix for live site.
        'format' => 'filtered_html', // Format of header text.
        'empty' => 1, // Show even when there are no results. Set to zero otherwise.
      );
      $view->add_item('default', 'header', 'views', 'area', $header_options);
    }
    if($view->name == "commons_events_upcoming" && $view->current_display == "panel_pane_1")
    {
         if(isset($_GET['filter_free_seats']))
         {
             foreach($view->result as $index => $data)
             {
                 $node = node_load($data->nid);
                 $attending = commons_events_get_raw_attendee_count($node);
                 if($node->field_number_of_attendees[LANGUAGE_NONE][0]['value'] <= $attending)
                 {
                     /*
                      * There is full attendance..remove from result set...
                      */
                     unset($view->result[$index]);
                 }
             }
         }
    }
}

function cbib_oc_hooks_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

    if($form_state['view']->name == "commons_events_upcoming" && $form_state['view']->current_display == "panel_pane_1")
    {
        if($form_state['view']->current_display = "panel_pane_1")
        {
            $form['#action'] = "/arrangementer";
        }        
        
        $form['field_address_organisation_name'] = array(
            '#options' => array(),
            '#type' => 'select',
            '#title' => t('Afholds sted:')
        );
        
        $locations = cbib_oc_hooks_get_all_event_locations();
        $form['field_address_organisation_name']['#options']['All'] = "Alle lokationer";
        foreach($locations as $index => $value)
        {	
            $form['field_address_organisation_name']['#options'][$index] = $value;
        }
                
         $new_form_info = array(
          'filter-field_address_organisation_name' => array('value' => 'field_address_organisation_name'),
         );
         
        $form['#info'] = array_merge($new_form_info, array_diff_assoc($form['#info'], $new_form_info));
        # the drupal checkboxes form field definition
        // Add new form item.
        $form['filter_free_seats'] = array(
          '#type' => 'checkbox',
          '#title' => t('Kun frie pladser'),
        );
        
        // Create widget from new form item and place it as a second element.
        $new_form_info = array(
          'filter-free-seats' => array('value' => 'filter_free_seats'),
        );
        $form['#info'] = array_merge($new_form_info, array_diff_assoc($form['#info'], $new_form_info));
    }
    
}
function cbib_oc_hooks_views_query_alter(&$view, &$query) {

  //simple example: change the order of the master display
  //if you want to do it only  on a certain display add something 
  // like  "&&$view->current_display == 'panel_page_1'"
  if ($view->name == "commons_events_upcoming" && $view->current_display == "panel_pane_1") {

    if(isset($_GET['field_address_organisation_name']) && strtolower($_GET['field_address_organisation_name']) != "all")
    {
        $query->add_table('field_data_field_address');
        $c = db_or()->condition('field_data_field_address.field_address_organisation_name', $_GET['field_address_organisation_name'], '=');
        $query->add_where(1,$c);
    }
  }
}
/*
 * Fetch uniqe event locations
 */
function cbib_oc_hooks_get_all_event_locations()
{
    $result = db_query("SELECT distinct(field_address_organisation_name) FROM centralbibliotek.field_data_field_address WHERE  field_data_field_address.entity_id in (SELECT entity_id FROM centralbibliotek.field_data_field_date where field_data_field_date.field_date_value >= curdate())
AND field_data_field_address.entity_id in (SELECT nid FROM centralbibliotek.node where status = 1) order by field_address_organisation_name desc;");
    return $result->fetchAllKeyed(0,0);
}
/**
 * Remove tabs on article content type
 */
function cbib_oc_hooks_preprocess_page(&$variables, $hook)
{

    $to_be_removed = array('node/%/clone/%');
    $path = drupal_get_path_alias();
    $path_parts = explode('/', $path);

    foreach ($variables['tabs'] as $group_key =>$tab_group)
        {
            if (is_array($tab_group))
            {
                foreach ($tab_group as $key =>$tab)
                {
                    if (isset($tab['#link']['path']) && in_array($tab['#link']['path'], $to_be_removed))
                    {
                       if ($path_parts[0] == 'node' && $path_parts[2] == 'edit') {
                          unset($variables['tabs'][$group_key][$key]);
                       }
                    }
                }
            }
        }
 }
 /*
  * Alter messages used for notifcations

 function cbib_oc_hooks_commons_notify_message_selection_alter(&$message_type, $hook, &$node)
 {
     if($node->type == 'group')
     {
         //$message_type = "commons_notify_node_created";
         $message_type = "oc_commons_notify_group_created";
     }
     elseif($node->type == 'post')
     {
         //$message_type = "commons_notify_comment_created";
         $message_type =  "oc_notify_post_created";
     }
     elseif($node->type == 'event')
     {
        //$message_type = "commons_events_event_node_created";
         $message_type =  "oc_notify_event_created";
     }
     elseif($node->type == 'license')
     {
         $message_type = "oc_notify_license_created";
     }
     elseif($node->type == 'licenses')
     {
         $message_type = "oc_notify_licenses_created";
     }
     elseif($node->type == 'news')
     {
         //$message_type = "commons_notify_node_created_no_groups";
         $message_type = "oc_commons_news_created_message";
     }
     elseif($node->type == 'page')
     {
         $message_type = "oc_notify_page_created";
     }
     elseif($node->type == 'document')
     {
         $message_type = "oc_notify_document_created";
     }
     elseif($node->type == 'centralbibliotek')
     {
         //$message_type = "commons_notify_node_created";
     }
     elseif($node->type == 'library')
     {
         $message_type = "oc_notify_library_created";
     }
 }
  */
