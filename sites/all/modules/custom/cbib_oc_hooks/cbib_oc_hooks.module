<?php

include_once "cbib_oc_hooks.admin.inc";
include_once "cbib_oc_hooks.forms.inc";

function cbib_oc_hooks_views_post_execute(&$view) {
    if($view->name == "search_api_nodes")
    {
        $new_result = null;
        foreach($view->result as $i => $search_entity)
        {
            $entity_info = explode("/",$search_entity->entity);
            if($entity_info[0] == "user")
            {
                $entity_loaded = user_load($entity_info[1]);
                if($entity_loaded->status == 0)
                {
                        unset($view->result[$i]);
                        $view->total_rows--;
                }
            }
        }
    }
}
/**
 * Implements hook_init().
 */
function cbib_oc_hooks_init() {
  if (!drupal_is_cli()) {
    // Path of your page with search results.

      $path_parts = explode('?', request_uri());
      /* @var $path_parts type */
      if (strpos($path_parts[1], 'field_date_value=past') !== false ) {

      }else {
      // Name of your searcher.
      // In this case "search_api" is service
      // and "solr_index" is machine name of the index.
      $part = explode('/', $path_parts[0]);

      if($part[2] == 'grupper') {
        $searcher = 'search_api@group_index';
      }else {
        $searcher = 'search_api@arrangement_index';
      }
      $adapter = facetapi_adapter_load($searcher);
      $url_processor = $adapter->getUrlProcessor();
      $active_items = $adapter->getAllActiveItems();

      // Check if the filter is already active.

      $filter_key = $url_processor->getFilterKey();
      $params = $url_processor->fetchParams();
      if (!isset($active_items[$filter]) && !isset($active_items['field_event_type:640'])) {

        // If not, get and tamper with your parameters here.
      if(empty($params[$filter_key])){
        $params[$filter_key] = [];
        }

        $params[$filter_key][] = $filter;

      }
      /*
       * Have we selected cb ?
       * And Is the og_reg_filter_active ?
       */
      $selected_cbib = $_SESSION['cbib_centralbibliotek'];
      if($selected_cbib != false && !isset($_GET['og_group_ref']) && $part[1] != 'search')
      {
          drupal_add_js(array('oc_cbib' => array('centralbib' => $selected_cbib)), 'setting');
          $is_active_selection = false;
          foreach($active_items as $key => $value)
          {
              if($value['field alias'] == "og_group_ref" && $value['value'] != $selected_cbib)
              {
                  $is_active_selection = true;
              }
          }
          if(!$is_active_selection)
          {
              // If not, get and tamper with your parameters here.

              $params[$filter_key][] = "og_group_ref:" . $selected_cbib;
              //$adapter->setParams($params, $filter_key);
          }
      }
      $selected_cbib = $_SESSION['cbib_centralbibliotek'];
      if($selected_cbib != false && !isset($_GET['node_og_group_ref']))
      {
          drupal_add_js(array('oc_cbib' => array('centralbib' => $selected_cbib)), 'setting');
          $is_active_selection = false;
          foreach($active_items as $key => $value)
          {
              if($value['field alias'] == "node_og_group_ref" && $value['value'] != $selected_cbib)
              {
                  $is_active_selection = true;
              }
          }
          if(!$is_active_selection)
          {
              // If not, get and tamper with your parameters here.

              $params[$filter_key][] = "node%3Aog_group_ref:" . $selected_cbib;
              //$adapter->setParams($params, $filter_key);
          }
      }
      $adapter->setParams($params, $filter_key);
    }
}
}

// hide virtical tabs
function cbib_oc_hooks_field_group_build_pre_render_alter(&$element) {

  if($element['#bundle'] == 'event') {
  $element['event_registration_settings']['#states'] = array(
    'invisible' => array(
    'select[name="field_event_type[und]"]' => array('value' => 640),
      ),
    'disabled' => array(
    'select[name="field_event_type[und]"]' => array('value' => 640),
      ),
    );
  $element['scheduler_settings']['unpublish_on']['#states'] = array(
    'visible' => array(
    'select[name="field_event_type[und]"]' => array('value' => 640),
      ),
    );
  }
}
/*
 * Register any additonal routes required by the module.
 */
function  cbib_oc_hooks_menu() {
  $items = array();
  $items['admin/settings/cbib_oc_hooks'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Cbib OC_Hooks config',
    'description' => 'Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cbib_oc_hooks_admin'),
    'access arguments' => array('administer cbib_hooks'),
    'access callback' => TRUE,
   );

  $items['node/%node/follower'] = array(
    'title' => 'Followers',
    'page callback' => 'cbib_oc_hooks_event_follower_page',
    'page arguments' => array(1),
    'access callback' => 'cbib_oc_hooks_follower_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

   $items['admin/settings/cbib_oc_hooks/js/summary'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'js_summary',
    'description' => 'creates summary of text recived and returns',
    'page callback' => 'cbib_oc_hooks_js_create_summary',
    'access arguments' => array('administer cbib_hooks'),
    'access callback' => TRUE,
   );

  $items['oc/user/autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'autocomplete with names + emails.',
    'description' => 'modified user autocomplete',
    'page callback' => 'cbib_oc_hooks_user_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
   );

    $items['group/%/%/admin/oc/resend'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Resend group notification.',
    'description' => 'send group notification',
    'page arguments' => array(1, 2),
    'page callback' => 'cbib_oc_hooks_og_resend_notifcation',
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('add user', 1, 2),
   );

    $items['admin/rebuild/nodes/last/posts'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'rebuild',
    'description' => 'rebuild',
    'page callback' => 'update_all_groups_with_comments',
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),

   );
    $items['flag/flag/unfollow/%'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Delete followers',
    'page arguments' => array(3,4),
    'description' => 'Delete group followers',
    'page callback' => 'cbib_oc_hooks_flag_delete',
    'access callback' => 'check_og_permissions',
    'access arguments' => array('administrator member'),
   );
   $items['flag/flag/follow/all/library'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'test',
    'description' => 'test',
    'page callback' => 'user_follow_all_library_licenes',
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
   );
   
   $items['group/node/%entity_object/admin/follower/broadcast'] = array(
    'load arguments' => array('node'),
    'title' => 'Email group followers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'cbib_oc_hooks_broadcast_to_group_followers_form',
      1,2
    ),
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for showing the folower tab.
 */
function cbib_oc_hooks_follower_access($event_node) {
  if ($event_node->type == 'event' && user_access('view event registration')) {
    return TRUE;
  }

  return FALSE;
}
  /**
 * Page callback for full event follower listing.
 */
function cbib_oc_hooks_event_follower_page($event_node) {
  $title = '<p class="commons-events-attendees-title">' . t('Followers') . '</p>';
  $event_nid = $event_node->nid;
  if (!isset($variables['display']) || $variables['display'] != 'full') {
    return $title . views_embed_view('node_followers', 'node_follower_list', $event_nid)
      . '<p class="commons-events-all-attendees"><a href="/node/' . $event_nid . '/followers">'
      . t('See all followers') . '</a></p>';
  }
  return $title . views_embed_view('node_followers', 
    'node_follower_list',
    $event_nid);
}

function check_og_permissions() {
  $nid = arg(3);
  if (og_user_access('node', $nid, 'administrator members')) {
    return TRUE;
  }else {
      return FALSE;
  }
}
function cbib_oc_hooks_menu_alter(&$items) {
         // entity local tasks
foreach (registration_get_registration_instances() as $instance) {
  $type = $instance['entity_type'];
  if (!in_array($type, array('registration', 'registration_type'))) {
      $items[$type . '/%entity_object/registrations']['access callback'] = 'cbib_oc_hooks_registration_administer_registrations_access';
      $items[$type . '/%entity_object/registrations/list']['access callback'] = 'cbib_oc_hooks_registration_administer_registrations_access';
      $items[$type . '/%entity_object/registrations/settings']['access callback'] = 'cbib_oc_hooks_registration_administer_registrations_access';
      $items[$type . '/%entity_object/registrations/broadcast']['access callback'] = 'cbib_oc_hooks_registration_administer_registrations_access';
    }
  }
 return $items;
}

function cbib_oc_hooks_registration_administer_registrations_access ($entity_type, $entity) {

  if (og_user_access('node', $entity->nid, 'administrator members')) {
    return TRUE;
  }
  $registration_type = registration_get_entity_registration_type($entity_type, $entity);
   if ($registration_type) {
  if (user_access("administer $registration_type registration")) {
    return TRUE;
  }
  elseif (user_access("administer own $registration_type registration") && entity_access('update', $entity_type, $entity)) {
    return TRUE;
    }
  }
  return FALSE;
}

function cbib_oc_hooks_registration_access($op, Registration $registration = NULL, $account = NULL) {

   if (og_user_access('node', $registration->entity_id, 'administrator members')) {
      return TRUE;
   }

}


/**
 * Implements hook_permission().
 */
function cbib_oc_hooks_permission() {
  return array(
    'administer cbib_hooks' => array(
      'title' => t('Administrer digitalpost'),
      'description' => t('Giver adgang til configuere digitalpost'),
    )
  );
}

/**
 * By enabling this filter, items of this facet can be rewritten prior to rendering by implementing the hook:
 */
function cbib_oc_hooks_facet_items_alter(&$build, &$settings) {
  if ($settings->facet == "field_date:value") {
    foreach($build as $key => $item) {
      unset($build[$key]['#count']);
    }
  }
  if ($settings->facet == "field_event_type") {
    if(isset($build[50]) && $build[50]['#active'] == False){
      $build[640] = $build[50];
      unset($build[640]['#count']);
      unset($build[640]['#query']['field_date_value']);
      $count = key($build[50]['#query']['field_event_type']);
      $build[640]['#query']['field_event_type'][$count] = '640';
      $build[640]['#markup'] = 'E-læring u/dato';
    }
  }
  if ($settings->facet == "field_address:locality") {
  $locations = cbib_oc_hooks_get_all_event_locations();
  $loca = array();
  foreach($locations as $id => $loc) {
    if ($build[$id]["#markup"] == $loc) {
      $loca[$id] = $build[$id];
      }
    if ($loc == '') {
      unset($loca[$id]);
    }

  }

      $build = $loca;
  }
  if ($settings->facet == "og_group_ref" || $settings->facet == "node:og_group_ref") {

      //$CentralLibraries = null;
      $CentralLibraries_nids = null;
      $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'centralbibliotek')
          ->propertyCondition('status', NODE_PUBLISHED)
          // Run the query as user 1.
          ->addMetaData('account', user_load(1));

        $result = $query->execute();
        if (isset($result['node'])) {
          $CentralLibraries_nids = array_keys($result['node']);
          //$CentralLibraries = entity_load('node', $CentralLibraries_nids);
        }
      foreach($build as $key => $item) {
        if(!in_array($key, $CentralLibraries_nids))
        {
            //remove non cbib nodes from tilknytning result.
            unset($build[$key]);
        }
      }
    }
    if ($settings->facet == "temaspor_facet") {

      //$CentralLibraries = null;
      $CentralLibraries_nids = null;
      $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'temaspor')
          ->propertyCondition('status', NODE_PUBLISHED)
          // Run the query as user 1.
          ->addMetaData('account', user_load(1));

        $result = $query->execute();
        if (isset($result['node'])) {
          $CentralLibraries_nids = array_keys($result['node']);
          //$CentralLibraries = entity_load('node', $CentralLibraries_nids);
        }
      foreach($build as $key => $item) {
        
        if(!in_array($key, $CentralLibraries_nids))
        {
            //remove non cbib nodes from tilknytning result.
            unset($build[$key]);
        }else {
          $node = node_load($key);
          $build[$key]['#markup'] = $node->title;
        }
      }
    }
}
function cbib_oc_hooks_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as $index => $info) {
    $searcher_info[$index]['types'][] = 'MYENTITY';
  }
}
function cbib_oc_hooks_facetapi_facet_info($searcher_info) {
  $facets = array();

  if (isset($searcher_info['types']['MYENTITY'])) {
    $facets['temaspor_facet'] = array(
      'label' => t('temaspor facet'),
      'description' => t('Filter by temaspor facet.'),
      'field' => 'og_group_ref',
    );

  }

  return $facets;
}
/*
* Alter various forms.
 */
function cbib_oc_hooks_form_alter(&$form, &$form_state, $form_id)
{
    if ($form_id == "temaspor_node_form") {
        $form['field_og_subscribe_settings']['#access'] = FALSE;
    }
    if($form_id == "user_register_form")
    {
        hide($form['actions']['submit']);
        $form['actions']['submit2']['#value'] = t("Send");
        $form['actions']['submit2']['#type'] = "submit";
        $form['readmore']['#markup'] = '<a target="_blank" href="/content/om-centralbibliotekdk">Læs mere</a> om, hvad vi bruger oplysningerne til.';
        $form['readmore']['#weight'] = "99";
    }
    if($form_id == "user_login")
    {
        //Added ability to referer to last page before login.
        $referer = $_SERVER['HTTP_REFERER'];
        $parsed = parse_url($referer, PHP_URL_PATH);
        if ($parsed != '/user/login') {
        $_SESSION['ref'] = $parsed;
        }
        $form['#submit'][] = 'cbib_oc_hooks_user_login_submit_handler';
    }
    if($form_id == "event_node_form")
    {
// If we're checking out, hide the extra address field to streamline user experience
// We grab the total number of addresses added
// We check if the last address is in Afghanistan. If it is, we delete it.
if ($form['field_address'][LANGUAGE_NONE]['add_more']['#ajax']['wrapper'] === 'field-address-add-more-wrapper') {
    $last_address = $form['field_address'][LANGUAGE_NONE]['#max_delta'];
    for ($x = 0; $x <= $last_address; $x++) {
        $country = $form['field_address'][LANGUAGE_NONE][$x]['#address']['country'];
        $locality = $form['field_address'][LANGUAGE_NONE][$x]['#address']['locality'];
        $postal_code = $form['field_address'][LANGUAGE_NONE][$x]['#address']['postal_code'];
        if ($country == "" || $country == "DK" && empty($locality) && empty($postal_code) && $x != 0) {
            unset($form['field_address'][LANGUAGE_NONE][$x]);
            // Make sure the site knows there is one less addresse as well
            $form['field_address'][LANGUAGE_NONE]['#max_delta'] = $last_address - 1;
        }
    }
}
        //drupal_add_js(drupal_get_path('module', 'cbib_oc_hooks') .'/js/end-date.js',array('weight' => 999));
        /*
         * JS to create live preview of summary.
         */
        drupal_add_js(array('cbib_oc_hooks' => array('summary_length' => variable_get('teaser_length', 600))), 'setting');
        drupal_add_js(drupal_get_path('module', 'cbib_oc_hooks') .'/js/oc_summary_preview.js');

        array_unshift($form['#validate'], "validate_online_adresses_fix");
    }
    if($form_id == "og_ui_add_users" && isset($form['og_user']['name']['#autocomplete_path']))
    {
        $form['og_user']['name']['#autocomplete_path'] = 'oc/user/autocomplete';
    }
    if(isset($form['#id']) && $form['#id'] == "views-exposed-form-og-members-admin-default")
    {
        $form['uid']['#autocomplete_path'] = 'oc/user/autocomplete';
    }
    if($form_id == "news_node_form" || $form_id == "event_node_form" || $form_id == "library_node_form"
        || $form_id == "centralbibliotek_node_form" || $form_id == "group_node_form" || $form_id == "license_node_form"
        || $form_id == "licenses_node_form" || $form_id == "page_node_form" || $form_id == "document_node_form"
        || $form_id == "post_node_form")
    {
      // Add checkbox option
       $form['options']['gensend_notifcation'] = array(
        '#type' => 'checkbox',
        '#title' => t('Genudsend notifcation'),
        '#default_value' => 0,
      );
    }
    if($form_id == "group_node_form")
    {
        hide($form['field_last_comment_date']);
    }
}
function validate_online_adresses_fix(&$form,&$form_state)
{
}
/**
 * Implements hook_form_BASE_FORM_ID_alter
 */
  function cbib_oc_hooks_form_node_form_alter(&$form, $form_state) {

  // if you are targeting a specific content type then
  // you can access the type:
  $type = $form['#node']->type;

 // Alter the posts form to allow titles in quick reply.

  if ($type == 'document') {
    unset($form['field_formidling_og_pr']);
  }

}

/**
 * Implements hook_user_insert
 */
function cbib_oc_hooks_user_insert(&$edit, $account, $category) {
  $nid = $edit['field_f_lg_centralbibliotek']['und'];
  foreach ($nid as $id) {
    commons_follow_node_follow_node($id['target_id'], 'centralbibliotek', $account->uid);
  }
}
function cbib_oc_hooks_user_presave(&$edit, $account, $category)
{
   /*
   * Asign user a cbib based on his library location
   */
  if(isset($edit['field_library']['und'][0]['target_id']))
  {
      $library = node_load($edit['field_library']['und'][0]['target_id']);
      $cbib_ref_id = isset($library->field_centralbibliotek_ref['und'][0]['target_id']) ? $library->field_centralbibliotek_ref['und'][0]['target_id'] : null;
      if($cbib_ref_id != null)
      {
        $edit['field_centralbibliotek_ref']['und'][0]['target_id'] = $cbib_ref_id;
      }
  }
}
function cbib_oc_hooks_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
    hide($form['field_centralbibliotek_ref']);
}
/*
 * Alter the posts form to allow titles in quick reply.
 */
function cbib_oc_hooks_form_commons_bw_partial_node_form_alter(&$form, &$form_state) {
    /*
     * Overwrite the commons settings for posts.
     * Allow title field to be trigger.
     */
    if (empty($form['#entity']) || $form['#entity']->type != 'post') {
        return;
    }
    drupal_add_css(drupal_get_path('module', 'cbib_oc_hooks') . "/css/commons_posts_overwrites.css");

    // Set fields as hideable so the forms can be compacted.
    $form['title_field']['#attributes']['class'][] = 'trigger-field';
    foreach (array('body','field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
      if (isset($form[$field])) {
        $form[$field]['#attributes']['class'][] = 'hideable-field';
      }
    }
}
/*
 * Function to keeps users on the page from which they click login.
 */
function cbib_oc_hooks_user_login_submit_handler($form, &$form_state) {
  if(isset($_SESSION['ref'])) {
      $current = $_SESSION['ref'];
      unset($_SESSION['ref']);
      drupal_goto(urldecode($current));
  }


}
/*
 * Function that allow us to prevent sending emails
 * when performing tests on the system.
 * can be controlled from the configuration form.
 */
function cbib_oc_hooks_mail_alter(&$message)
{
  // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
  // We can use variable_get() to get the $conf variable set in our settings.php file
  // Note that by setting the default to TRUE, the default setting for the system is to be
  // a development environment. Set this to FALSE to have the default be a live environment.
    if(variable_get('oc_hooks_prevent_email_dispatch', TRUE) &&  ($message['to'] != "tfpet@odense.dk" && $message['to'] != 'tobsf@hotmail.com' &&  $message['to'] != 'memleakz@gmail.com' && $message['to'] != "maa@odense.dk" && $message['to'] != "dennisbhansen@me.com" ))
    {
      // First: Prevent the mail from being sent
      $message['send'] = FALSE;

      // Next: Log the mail so it can be debugged if necessary
      watchdog('Development Env', 'The following email was not sent: !message', array('!message' => '<pre>' . print_r($message, TRUE) . '</pre>'));
    }
    if($message['id'] == "mimemail_rules_rules_action_mail_rules_notify_attendee_by_mail_4" 
    && $message['send'] != false)
    {
        /*
         * We take over this email , and make it a event invite instead.
         * Investigate how todo with drupal mail.
         */
        $message['send'] = FALSE;
        $node = menu_get_object();
        
        if($node == null)
        {
            //get the node id from url , when submitting from group event
            //administration page.
            $nid = arg(1);
            // Load the node if you need to
            $node = node_load($nid);
        }
        $user = user_load($node->uid);
        $from_address = $user->mail;
        $from_mail = $user->mail;
        $to_address = $message['to'];
        $Organizer_name = $user->field_name_first['und'][0]['value'] . " " . $user->field_name_last['und'][0]['value'];
        $subject = check_plain($node->title);
        $location = "";
        $startTime = $node->field_date['und'][0]['value'];
        $endtime = $node->field_date['und'][0]['value2'];
        $domain = "centralbibliotek.dk";
        $description = $message['body'];
        $location = "";
        //Create unique identifier

        if($node->field_location['und'][0] != "online")
        {
            if(!empty($node->field_address[und][0]["organisation_name"]))
            {
                $location = $node->field_address[und][0]["organisation_name"];
            }
            else
            {
                if(!empty($node->field_address[und][0]["thoroughfare"]) || !empty($node->field_address[und][0]["postal_code"]) || !empty($node->field_address[und][0]["locality"]))
                {
                    $location = $node->field_address[und][0]["thoroughfare"] . " - ".$node->field_address[und][0]["postal_code"]." ".$node->field_address[und][0]["locality"];
                }
            }

        }
        foreach($node->field_date['und'] as $index => $date)
        {
            if($index == 0)
            {
                $subject = check_plain($node->title);
            }
            else
            {
                $subject = "Dag " . ($index+1) . ", " . check_plain($node->title);

            }
            $ical = "";
            $ical .="BEGIN:VCALENDAR\r\n";
            $ical .="PRODID:-//Microsoft Corporation//Outlook 16.0 MIMEDIR//EN\r\n";
            $ical .="VERSION:2.0\r\n";
            $ical .="METHOD:REQUEST\r\n";
            $ical .="BEGIN:VTIMEZONE\r\n";
            $ical .="TZID:Europe/Copenhagen\r\n";
            $ical .="BEGIN:STANDARD\r\n";
            $ical .="DTSTART:16011028T030000\r\n";
            $ical .="RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=10\r\n";
            $ical .="TZOFFSETFROM:+0200\r\n";
            $ical .="TZOFFSETTO:+0100\r\n";
            $ical .="END:STANDARD\r\n";
            $ical .="BEGIN:DAYLIGHT\r\n";
            $ical .="DTSTART:16010325T020000\r\n";
            $ical .="RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=3\r\n";
            $ical .="TZOFFSETFROM:+0100\r\n";
            $ical .="TZOFFSETTO:+0200\r\n";
            $ical .="END:DAYLIGHT\r\n";
            $ical .="END:VTIMEZONE\r\n";
            //$ical .="TZID:Europe/Copenhagen\r\n";
            /*
             * Start event generation
             */

            $cal_uid = date('Ymd').'T'.date('His')."-".(rand())."@centralbibliotek.dk";
            $startTime = $date['value'];
            $endtime = $date['value2'];
            $ical .="BEGIN:VEVENT\r\n";
            $ical .="DTSTART:".gmdate("Ymd\THis\Z", strtotime($startTime))."\r\n";
            $ical .="DTEND:".gmdate("Ymd\THis\Z", strtotime($endtime))."\r\n";
            $ical .="TRANSP:OPAQUE\r\n";
            $ical .="CLASS:PUBLIC\r\n";
            $ical .="CREATED:".date("Ymd\THis")."\r\n";
            $ical .="DESCRIPTION:".$description[0]."\r\n";
            $ical .="DTSTAMP:".date("Ymd\THis\Z")."\r\n";
            $ical .="ORGANIZER;CN=\"Centralbibliotek.dk\":mailto:no-reply@centralbibliotek.dk\r\n";
            if(!empty($location))
            {
                $ical .="LOCATION:\"".$location."\"\r\n";
            }
            $ical .="UID:".$cal_uid ."\r\n";
            if($index == 0)
            {
                $ical .="SUMMARY:".$subject. "\r\n";
            }
            else
            {
                $ical .="SUMMARY:".$subject. "\r\n";
            }
            $ical .="BEGIN:VALARM\r\n";
            $ical .="ACTION:DISPLAY\r\n";
            $ical .="DESCRIPTION:".$subject . "\r\n";
            $ical .="TRIGGER:-P1D\r\n";
            $ical .="END:VALARM\r\n";
            /*
             * end event generation
             */
            $ical .="END:VEVENT\r\n";


            $ical .="END:VCALENDAR\r\n";


            //Create Email Headers
            $mime_boundary = "meeting booking";
            $headers  = "MIME-Version: 1.0\n";
            $headers .= "Content-Type: multipart/alternative;charset=UTF-8;boundary=\"$mime_boundary\"\n";
            //$headers .= "Content-class: urn:content-classes:calendarmessage\n";
            $headers .= "From: \"Centralbibliotek.dk\" <no-reply@centralbibliotek.dk>\r\n";

            //Create Email Body (HTML)
            $msg = "--$mime_boundary\r\n";
            $msg .= "Content-Type: text/html; charset=\"UTF-8\"\n\n";
            $msg .= theme("mimemail_message",array("body" => $description[0]));

            $msg .= "--$mime_boundary\r\n";
            $msg .= 'Content-Type: text/calendar;name="meeting.ics";method=REQUEST'."\n";
            $msg .= "Content-Transfer-Encoding: 8bit\r\n\r\n";
            $msg .= $ical;
            $subject ='=?utf-8?B?'.base64_encode($subject).'?='; //make subject utf8 also..some clients have problems.
            mail($message['to'], $subject, $msg, $headers);
        }
        if(sizeof($node->field_date['und']) == 0)
        {
          $message['send'] = true;
        }

    }
}
/*
 * Custom callback function to create a live text summary.
 */
function cbib_oc_hooks_js_create_summary()
{
    echo text_summary($_GET['text'],null,300);
    drupal_exit();
}
/**
 * Implements hook_wysiwyg_plugin().
 *
 * @see hook_wysiwyg_plugin()
 */
function cbib_oc_hooks_ckeditor_plugin() {
  return array(
    'confighelper' => array(
      // Name of the plugin used to write it.
      'name' => 'confighelper',
      // Description of the plugin - it would be displayed in the plugins management section of profile settings.
      'desc' => t('Simplify the task of changing some behaviors of CKEditor'),
      // The full path to the CKEditor plugins directory, with the trailing slash.
      'path' => drupal_get_path('module', 'cbib_oc_hooks') . '/js/ckeditor/confighelper/'
    )
  );
}
/*
 * Overwriting user/autocomplete for commons autocompletion
 */
function cbib_oc_hooks_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $or = db_or();
    $or->condition('mail', db_like($string) . '%', 'LIKE');
    $or->condition('name', db_like($string) . '%', 'LIKE');
    $result = db_select('users')->fields('users', array('name','mail'))->condition($or)->range(0, 10)->execute();

    foreach ($result as $user) {
      $matches[$user->name] = check_plain($user->name) . " (" . check_plain($user->mail) . ")";
    }
  }
  drupal_json_output($matches);
}
/*
 * Modify OG group admin menu to allow resend of notifcations.
 */
function cbib_oc_hooks_og_ui_get_group_admin($group_type, $gid) {
    $items = array();
    $node = node_load($gid);
    if (og_user_access($group_type, $gid, 'manage members')) {
    $items['resend_notifcation'] = array(
      'title' => t('Resend notification'),
      'description' => t('Resends original creation notifcation ( this will notify all users on the site!!)'),
      'href' => "admin/oc/resend",
    );
    if($node->type == "group")
    {
      $items['write_to_followers'] = array(
        'title' => t('Skriv til gruppe følgere'),
        'description' => t('Skriv til gruppe følgere'),
        'href' => "admin/follower/broadcast",
      );
    }

    
  }

  return $items;
}
/*
 * Callback that handles triggering the resend of the notification for
 * node creation.
 */
function cbib_oc_hooks_og_resend_notifcation($entity_type,$node_id)
{
    $node = node_load($node_id);
    commons_notify_send_message_on_shutdown($node);
    drupal_set_message(t("Notification er blevet gensendt."));
    drupal_goto(url('node/'. $node->nid));
}
/*
 * Handle resending of news node notifications
 */
function cbib_oc_hooks_node_update($node)
{
    if($node->gensend_notifcation)
    {
       drupal_set_message(t("Notification er blevet gensendt."));
       drupal_register_shutdown_function('commons_notify_send_message_on_shutdown', $node);
    }
}
function cbib_oc_hooks_flag_delete($nid, $user_id) {
//$nid = arg(1);
$flag = flag_get_flag('commons_follow_node');
 // Check if this content type use the "Individual nodes" flag
      $account = isset($user_id) ? user_load($user_id) : NULL;
      //$flag->flag('unflag', $nid, $account, TRUE);
  $flag->flag('unflag', $nid, $account, TRUE);
  drupal_set_message(
    t('Fjernede følg fra brugeren @user',
      array(
        '@user' => $account->name
      )
    )
  );
  // Redirect to the entity that has been unflagged.
  $destination = isset($_REQUEST['destination']) ? $_REQUEST['destination'] : 'node/' . $nid;
  drupal_goto($destination);
}
/*
 * View hooks
 */
function cbib_oc_hooks_views_pre_render(&$view)
{
        if($view->name == "node_followers" && $view->current_display == "panel_pane_1") {
        $nid = arg(1);
        if (og_user_access('node', $nid, 'administrator member', $ignore_admin = TRUE)) {
            $view->field['nothing']->options['exclude'] = FALSE;
        }

    }
    if($view->name == "commons_events_upcoming" && $view->current_display == "panel_pane_7") {
        $output = array();
         foreach($view->result as $index => $data) {
             $delta = $data->date_delta_field_date;
             if ($delta != 0) {
             $view->result[0]->field_data_field_date_delta = array_unshift($output , "Dag " . ($delta+1));
             $view->result[$index]->field_data_field_date_delta = array_unshift($output , "Dag " . ($delta+1));
             }
         }
    }

    if($view->name == "centralbibliotek_license" && $view->current_display == "panel_pane_6")
    {
        $content = array();
        $target_group = node_load(127);
        $links = null;
        if(!user_is_logged_in())
        {
          $links = flag_anon_link('node', $target_group,'page_manager');
        }
        else
        {
            $links = flag_link('node', $target_group,'page_manager');
        }

        $follow_all_link = get_follow_all_license_link();
        $header_options = array(
        'label' => t('Header text'), // Administrative label. Not really needed here.
        //'content' => $links['flag-commons_follow_group']['title'], // Content of header text.
            'content' => (isset($links['flag-commons_follow_node']['title']) ? $links['flag-commons_follow_node']['title'] : $links['flag-anon-commons_follow_node']['title']) . $follow_all_link, // Fix for live site.
        'format' => 'full_html', // Format of header text.
        'empty' => 1, // Show even when there are no results. Set to zero otherwise.
      );
      $view->add_item('default', 'header', 'views', 'area', $header_options);
    }
    if($view->name == "search_api_arrangementer")
    {
         if(isset($_GET['filter_free_seats']))
         {
             foreach($view->result as $index => $data)
             {
                 $node = node_load($data->nid);
                 $attending = commons_events_get_raw_attendee_count($node);
                 if($node->field_number_of_attendees[LANGUAGE_NONE][0]['value'] <= $attending)
                 {
                     /*
                      * There is full attendance..remove from result set...
                      */
                     unset($view->result[$index]);
                 }
             }
         }
    }

}
/**
 * Implements theme_preprocess_pager_link().
 * needed to make filter_free_seats checkbox work with pagination.

function cbib_oc_hooks_preprocess_pager_link(&$variables) {
  if (isset($variables['parameters'])) {
    foreach ($variables['parameters'] as $key => $value) {
      // Remove all empty/false parameters from url.
      if (empty($value)) {
        unset($variables['parameters'][$key]);
      }
    }
  }
}*/
function cbib_oc_hooks_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

    if ($form['#id'] == 'views-exposed-form-search-api-nodes-default') { // Or: if ($form['#action'] === '/foo')
      $form['#action'] = '/search';
      if (isset($form['search_api_views_fulltext'])) {
         $form['search_api_views_fulltext']['#attributes']['class'][] = 'ctools-auto-submit-exclude';
      }
         $form['reset'] = array(
         '#markup' => '<a href="/search"><span value='.t('reset').' id="resets" class="fa fa-times"></span></a>',
         '#weight' => 1000,
         );
    }

    if($form_state['view']->name == "search_api_group")
    {
        if (isset($form['search_api_views_fulltext'])) {
         $form['search_api_views_fulltext']['#attributes']['class'][] = 'ctools-auto-submit-exclude';

         $form['reset'] = array(
         '#markup' => '<a href="/grupper"><span value='.t('reset').' id="reset" class="fa fa-times"></span></a>',
         '#weight' => 1000,
         );
      }
    }
    if($form_state['view']->name == "search_api_arrangementer")
    {
        if (isset($form['search_api_views_fulltext'])) {
         $form['search_api_views_fulltext']['#attributes']['class'][] = 'ctools-auto-submit-exclude';
         $path_parts = explode('/', request_uri());
         if($path_parts[3] == 'events') {
           $path = '/';
           $form['sort_order']['#default_value'] = 'DESC';
         }else {
           $path = '/aktivitet';
         }
         $form['reset'] = array(
         '#markup' => '<a href=' . $path .'><span value='.t('reset').' id="reset" class="fa fa-times"></span></a>',
         '#weight' => 1000,
         );
         /* change exposed filter
         $field_date_value = $form_state['input']['field_date_value'];
         if ($field_date_value == 'past' || $field_date_value == 'past_year' || $field_date_value == 'past_3_month') {
           $form['sort_order']['#default_value'] = 'DESC';
         }
          *
          */
        }


        # the drupal checkboxes form field definition
        // Add new form item.
        /*$form['filter_free_seats'] = array(
          '#type' => 'checkbox',
          '#title' => t('Kun frie pladser'),
          '#default_value' => 0
        );

        // Create widget from new form item and place it as a second element.
        $new_form_info = array(
          'filter-free-seats' => array('value' => 'filter_free_seats'),
        );
        $form['#info'] = array_merge($new_form_info, array_diff_assoc($form['#info'], $new_form_info));*/

    }
}
/**
 * Implements hook_search_api_db_query_alter().
 *
 * Preprocesses a search's database query before it is executed.
 *
 * @param SelectQueryInterface $db_query
 *   The database query to be executed for the search. Will have "item_id" and
 *   "score" columns in its result.
 * @param SearchApiQueryInterface $query
 *   The search query that is being executed.
 *
 * @see SearchApiDbService::preQuery()
 */
function cbib_oc_hooks_search_api_db_query_alter(SelectQueryInterface &$db_query, SearchApiQueryInterface $query)
{
  $path_parts = explode('?', request_uri());
  if(strpos($path_parts[1], 'field_date_value=past') !== false || strpos($path_parts[0], "/aktivitet") === false){
  }else{
    $db_query->orderby('sticky', 'DESC');
    $db_query->orderby('ISNULL(search_api_combined_1)', 'ASC');
    $db_query->orderby('t_2.field_date_value', 'ASC');
    $db_query->orderby('created', 'DESC');
  }
}
/**
 * Implements hook_search_api_query_alter().
 */
function cbib_oc_hooks_search_api_query_alter(SearchApiQueryInterface $query) {
  $path_parts = explode('?', request_uri());
  if(strpos($path_parts[1], 'field_date_value=past') !== false || strpos($path_parts[0], "/aktivitet") === false){
  }else{
    $start_day = strtotime("now -10 hours");
    // Select events in progress
    $left_filter = $query->createFilter('OR');
    $left_filter->condition('field_date:value', $start_day, '>=');
  
    // Select events with a start date in the future
    $right_filter = $query->createFilter('OR');
    $right_filter->condition('search_api_combined_1', NULL, '=');
  
    $main_filter = $query->createFilter('OR');
    $main_filter->filter($left_filter);
    $main_filter->filter($right_filter);
  
    $query->filter($main_filter);
  }

    if (!user_access('use search_api_sorts')) {
        return;
    }

    $view = views_get_current_view();
    if (empty($view) || $view->name != 'search_api_arrangementer') {
        return;
    }

    if (!empty($_GET['sort'])) {
        return;
    }


    // There's already an existing sort, so abort!
    $existing = $query->getSort();
    if (!empty($existing)) {
        return;
    }

    $search_sorts = search_api_sorts_search_sorts($query->getIndex()->machine_name);


    foreach ($search_sorts as $key => $sort) {
        if ($sort->field == 'search_api_combined_1' && strpos($path_parts[1], 'field_date_value=past') === false) {
            $search_sorts[$key]->default_sort = 1;
            $search_sorts[$key]->default_sort_no_terms = 1;
            $search_sorts[$key]->active = TRUE;
            $search_sorts[$key]->default_order = 'ASC';
            unset($search_sorts[1]);
        }
        elseif ($sort->field == 'search_api_combined_1') {
            $search_sorts[$key]->default_sort = 1;
            $search_sorts[$key]->default_sort_no_terms = 1;
            $search_sorts[$key]->active = TRUE;
            $search_sorts[$key]->default_order = 'DESC';
            unset($search_sorts[1]);
        }
        elseif ($sort->field == 'created' && strpos($path_parts[1], ']=640') !== false) {
            unset($search_sorts[0]);
        }
        else {
            unset($search_sorts[1]);
        }
    }

    
    if (empty($search_sorts)) {
        return;
    }
    $default_sort = _search_api_sorts_get_default_sort($search_sorts, $query->getKeys());

    // alter sort field and sort order
    $sort = $default_sort->field;
    $params = drupal_get_query_parameters($_GET, array(
      'q',
      'page'
    ));
    if (isset($params['sort']) && !empty($params['sort'])) {
        $sort = $params['sort'];
    }

    $order = $default_sort->default_order;
    if (isset($params['order']) && !empty($params['order'])) {
        $order = $params['order'];
    }

    if (!empty($order) && !empty($sort)) {
        $query->sort($sort, $order);
    }

    // Static save current search query
    $_query = &drupal_static('search_api_sorts_search_api_query_alter', array());
    $_query = $query;
}

function cbib_oc_hooks_views_query_alter(&$view, &$query) {

  //simple example: change the order of the master display
  //if you want to do it only  on a certain display add something
  // like  "&&$view->current_display == 'panel_page_1'"
  if ($view->name == "search_api_arrangementer") {

    if(isset($_GET['field_address_locality']) && strtolower($_GET['field_address_locality']) != "all")
    {
        $query->add_table('field_data_field_address');
        $c = db_or()->condition('field_data_field_address.field_address_locality', $_GET['field_address_locality'], '=');
        $query->add_where(1,$c);
    }
  }
}
/*
 * Fetch uniqe event locations
 */
function cbib_oc_hooks_get_all_event_locations()
{
    $result = db_query("SELECT distinct(field_address_locality) FROM centralbibliotek.field_data_field_address WHERE  field_data_field_address.entity_id in (SELECT entity_id FROM centralbibliotek.field_data_field_date where field_data_field_date.field_date_value >= curdate())
                        AND field_data_field_address.entity_id in (SELECT nid FROM centralbibliotek.node where status = 1) order by SUBSTRING(field_address_locality, 1, 1);");
    return $result->fetchAllKeyed(0,0);
}
/**
 * Remove tabs on article content type
 */
function cbib_oc_hooks_preprocess_page(&$variables, $hook)
{
    global $user;
    if ($variables['node']->field_og_subscribe_settings['und'][0]['value'] == 'invitation' && !og_is_member('node', $variables['node']->nid, 'user')) {
        $test = $variables['node']->field_access_granting_groups;
        /*
         * Check if user is member of an access giving group.
         */
        $abort = false;
        if(isset($variables['node']->field_access_granting_groups['und']))
        {
          foreach($variables['node']->field_access_granting_groups['und'] as $group_ref)
          {
              if(og_is_member('node',$group_ref['target_id'], 'user'))
              {
                  //user is member of a group that provides access.
                  $abort = true;
              }
          }

        }
        if (in_array('administrator', $user->roles) || in_array('content moderator', $user->roles)) {
          // do fancy stuff
          $abort = true;
        }
        if($abort == false)
        {
            drupal_set_message($message = 'Indholdet kræver særlige rettigheder - f.eks. invitation til grupper', $type = 'status', $repeat = FALSE);
            drupal_access_denied();
            module_invoke_all('exit');
            drupal_exit();
        }
    }

    $to_be_removed = array('node/%/clone/%');
    $path = drupal_get_path_alias();
    $path_parts = explode('/', $path);

    foreach ($variables['tabs'] as $group_key =>$tab_group)
        {
            if (is_array($tab_group))
            {
                foreach ($tab_group as $key =>$tab)
                {
                    if (isset($tab['#link']['path']) && in_array($tab['#link']['path'], $to_be_removed))
                    {
                       if ($path_parts[0] == 'node' && $path_parts[2] == 'edit') {
                          unset($variables['tabs'][$group_key][$key]);
                       }
                    }
                }
            }
        }
 }
 /*
  * Alter messages used for notifcations
 */
 function cbib_oc_hooks_commons_notify_message_selection_alter(&$message_type, $hook, &$node)
 {
     if($node->type == 'group')
     {
         //$message_type = "commons_notify_node_created";
         $message_type = "oc_commons_notify_group_created";
     }
     elseif($node->type == 'post')
     {
         //$message_type = "commons_notify_comment_created";
         $message_type =  "oc_notify_post_created";
     }
     elseif($node->type == 'event')
     {
        //$message_type = "commons_events_event_node_created";
         $message_type =  "oc_notify_event_created";
     }
     elseif($node->type == 'license')
     {
         $message_type = "oc_notify_license_created";
     }
     elseif($node->type == 'licenses')
     {
         $message_type = "oc_notify_licenses_created";
     }
     elseif($node->type == 'news')
     {
         //$message_type = "commons_notify_node_created_no_groups";
         $message_type = "oc_commons_news_created_message";
     }
     elseif($node->type == 'page')
     {
         $message_type = "oc_notify_page_created";
     }
     elseif($node->type == 'document')
     {
         $message_type = "oc_notify_document_created";
     }
     elseif($node->type == 'centralbibliotek')
     {
         //$message_type = "commons_notify_node_created";
     }
     elseif($node->type == 'library')
     {
         $message_type = "oc_notify_library_created";
     }
 }

 function cbib_oc_hooks_node_insert($node)
 {
     /*
      * Update group node with comment date.
      */
     if($node->type == "post" || $node->type == "document" )
     {
         //Get node parent group and insert a new last post date.
         $group_node = node_load($node->og_group_ref['und'][0]['target_id']);
         if($group_node != FALSE )
         {
            $wrapper = entity_metadata_wrapper('node',$group_node);
            if(isset($wrapper->field_last_comment_date))
            {
               $wrapper->field_last_comment_date->set($node->created);
               $wrapper->save();
            }
         }
     }
 }
 function update_all_groups_with_comments()
 {
     $query = new EntityFieldQuery();
     $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'group')
      ->propertyCondition('status', NODE_PUBLISHED);

     $result = $query->execute();
     if (isset($result['node'])) {
       $news_items_nids = array_keys($result['node']);
       $news_items = entity_load('node', $news_items_nids);
       foreach($news_items as $index => $node)
       {
           $wrapper = entity_metadata_wrapper('node',$node);
            $last_post_date = get_newst_post_date($node->nid);
            if(isset($wrapper->field_last_comment_date))
            {
               $wrapper->field_last_comment_date->set($last_post_date != false ? $last_post_date : 0);
               $wrapper->save();
            }
       }
     }
 }
 function get_newst_post_date($nid)
  {
     $result = db_query("SELECT created FROM og_membership where gid='{$nid}' and entity_type = 'node' AND og_membership.etid in (SELECT nid FROM centralbibliotek.node where node.status = 1 and node.type ='post') order by created desc limit 1;");
     return $result->fetchField();
  }
/*
 * Token hack to make urls with utf8 working.
 * Some munincipalities have disable the setting: send urls as utf8 i explorer.
 * This requires links containing special chars to be url encoded.
 */
function cbib_oc_hooks_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();
    if($type == 'list<node>')
    {
         foreach ($tokens as $name => $original) {
             switch($name)
             {
                 case (strpos($name, ':url:encode') !== false):
                     $url_options = array('absolute' => TRUE);
                     $node = reset($data['list<node>']);
                     if($node != null)
                     {
                         $link = url('node/'. $node->nid, $url_options);
                         $link = explode('://',$link);
                         $link = rawurlencode($link[1]);
                         $replacements[$original] = $link;
                     }
                     break;
             }
         }
    }

    return $replacements;
}
/*
   * Allow users to follow all the licenses that the users cb/library subscribes too.
   *
   */
  function user_follow_all_library_licenes()
  {
      global $user; //get the curent user
      $user_data = user_load($user->uid);
      $user_library_id = $user_data->field_library['und'][0]['target_id']; //get the current user library
      /*
       * Query all licenes that the library is subsribed too
       */
      $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'license')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->fieldCondition('field_library_ref', 'target_id', $user_library_id , '=')
        // Run the query as user 1.
        ->addMetaData('account', user_load(1));
        $result = $query->execute();
      /*
       * Subscribe the user to these if not already subscribed.
       */
      if (isset($result['node'])) {
        $license_nids = array_keys($result['node']);
        foreach($license_nids as $lid)
        {
            commons_follow_node_follow_node($lid, 'license', $user->uid);
        }
      }
      /*
       * Show pretty success message.
       */
      drupal_set_message(t("Du følger nu alle licenser som dit bibliotek har adgang til."));
      $referer = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '';
      drupal_goto($referer);
  }
  function get_follow_all_license_link()
  {
      if(user_is_logged_in())
      {
          return "<div style='display: inline-block;'><a title='Som dit bibliotek abonere på.' href='/flag/flag/follow/all/library' class='action-item-small'>Følg alle licenser som dit bibliotek abonnerer på</a></div>";
      }
      else
      {
          return '';
      }

  }
  /*
   *
   */
function cbib_oc_hooks_flag_access($flag, $entity_id, $action, $account)
{
    //$entity = node_load($entity_id);
    $entity = menu_get_object(); // we only want to check on the main node object.
    if(isset($entity) && $entity->type == "group")
    {
        if($entity->field_og_subscribe_settings['und'][0]['value'] == 'approval' && $entity->field_og_access_default_value['und'][0]['value'] == 1)
        {
            if(!og_is_member('node',$entity->nid , 'user',$account))
            {
                drupal_add_css('.flag-wrapper {display:none;}', 'inline');
            }
        }
    }
}
/*
 * There is a problem with some groups loosing their approval required
 * setting for users.
 */
function cbib_oc_hooks_og_user_access_alter(&$perm, $context) {
  $account = $context['account'];
  $group_type = $context['group_type'];
  $group = $context['group'];
  if($group_type == "node" && $group->type == "group")
  {
      if(isset($group->field_og_subscribe_settings['und'][0]['value']) && $group->field_og_subscribe_settings['und'][0]['value'] == "approval")
      {
         if(!in_array('administrator', $account->roles) && !in_array('content moderator', $account->roles))
         {
            if(isset($perm['subscribe without approval']))
            {
                unset($perm['subscribe without approval']);
                $perm['subscribe'] = true;
            }
         }
      }
      }
  }
/*
 * Node clone alter
 */
function cbib_oc_hooks_clone_node_alter($node,$context)
{
    if($node->type == "event")
    {
        //fixup a setting.
        $node->field_registration['und'][0]['registration_type'] = "event";
    }
}
/*
* Handle sending emails to all group followers/members
*/
function cbib_oc_hooks_broadcast_to_group_followers($nid,$title,$msg)
{
    //get all followers of the target node
    $result = db_select('flag_content', 'c')
    ->fields('c')
    ->condition('content_id', $nid,'=')
    ->execute()
    ->fetchAssoc();


      //for all followers send an email with the msg.

    //display info for user.
}
/*
* Handle sending emails to selected group followers/members
*/
function cbib_oc_hooks_broadcast_to_targeted_group_followers()
{
    //get all followers of the target node
    //for all followers send an email with the msg.

    //display info for user.
}