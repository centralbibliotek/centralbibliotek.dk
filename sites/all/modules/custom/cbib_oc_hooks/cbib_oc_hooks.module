<?php
include_once "cbib_oc_hooks.admin.inc";
/*
 * Register any additonal routes required by the module.
 */
function  cbib_oc_hooks_menu() {
  $items = array();
  $items['admin/settings/cbib_oc_hooks'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Cbib OC_Hooks config',
    'description' => 'Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cbib_oc_hooks_admin'),
    'access arguments' => array('administer cbib_hooks'),
    'access callback' => TRUE,
   );
  
   $items['admin/settings/cbib_oc_hooks/js/summary'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'js_summary',
    'description' => 'creates summary of text recived and returns',
    'page callback' => 'cbib_oc_hooks_js_create_summary',
    'access arguments' => array('administer cbib_hooks'),
    'access callback' => TRUE,
   );
   
  $items['oc/user/autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'autocomplete with names + emails.',
    'description' => 'modified user autocomplete',
    'page callback' => 'cbib_oc_hooks_user_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
   );
   
    $items['group/%/%/admin/oc/resend'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Resend group notification.',
    'description' => 'send group notification',
    'page arguments' => array(1, 2),
    'page callback' => 'cbib_oc_hooks_og_resend_notifcation',
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('add user', 1, 2),
   );
   
  return $items;
}
/**
 * Implements hook_permission().
 */
function cbib_oc_hooks_permission() {
  return array(
    'administer cbib_hooks' => array(
      'title' => t('Administrer digitalpost'),
      'description' => t('Giver adgang til configuere digitalpost'),
    )
  );
}
/*
* Alter various forms.
 */
function cbib_oc_hooks_form_alter(&$form, &$form_state, $form_id)
{
    if($form_id == "user_register_form")
    {
        hide($form['actions']['submit']);
        $form['actions']['submit2']['#value'] = t("Send");
        $form['actions']['submit2']['#type'] = "submit";
    }
    if($form_id == "user_login")
    {
        //Added ability to referer to last page before login.
        $referer = $_SERVER['HTTP_REFERER'];
        $parsed = parse_url($referer, PHP_URL_PATH);
        if ($parsed != '/user/login') {
        $_SESSION['ref'] = $parsed;
        }
        $form['#submit'][] = 'cbib_oc_hooks_user_login_submit_handler';
    }
    if($form_id == "event_node_form")
    {
        drupal_add_js(drupal_get_path('module', 'cbib_oc_hooks') .'/js/end-date.js',array('weight' => 999));
        /*
         * JS to create live preview of summary.
         */
        drupal_add_js(array('cbib_oc_hooks' => array('summary_length' => variable_get('teaser_length', 600))), 'setting');
        drupal_add_js(drupal_get_path('module', 'cbib_oc_hooks') .'/js/oc_summary_preview.js');
    }
    if($form_id == "og_ui_add_users" && isset($form['og_user']['name']['#autocomplete_path']))
    {
        $form['og_user']['name']['#autocomplete_path'] = 'oc/user/autocomplete';
    }
    if($form_id == "news_node_form")
    {
      // Add checkbox option
       $form['options']['gensend_notifcation'] = array(
        '#type' => 'checkbox',
        '#title' => t('Genudsend notifcation'),
        '#default_value' => 0,
      );
    }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter
 */
  function cbib_oc_hooks_form_node_form_alter(&$form, $form_state) {
    
  // if you are targeting a specific content type then 
  // you can access the type:
  $type = $form['#node']->type;

 // Alter the posts form to allow titles in quick reply.
 
  if ($type == 'document') {
    unset($form['field_formidling_og_pr']);
  }
  
}

/**
 * Implements hook_user_insert
 */
function cbib_oc_hooks_user_insert(&$edit, $account, $category) {
  $nid = $edit['field_f_lg_centralbibliotek']['und'];
  foreach ($nid as $id) {
    commons_follow_node_follow_node($id['target_id'], 'centralbibliotek', $account->uid);
  }
}

/*
 * Alter the posts form to allow titles in quick reply.
 */
function cbib_oc_hooks_form_commons_bw_partial_node_form_alter(&$form, &$form_state) {
    /*
     * Overwrite the commons settings for posts.
     * Allow title field to be trigger.
     */
    if (empty($form['#entity']) || $form['#entity']->type != 'post') {
        return;
    }    
    drupal_add_css(drupal_get_path('module', 'cbib_oc_hooks') . "/css/commons_posts_overwrites.css");
    
    // Set fields as hideable so the forms can be compacted.
    $form['title_field']['#attributes']['class'][] = 'trigger-field';
    foreach (array('body','field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
      if (isset($form[$field])) {
        $form[$field]['#attributes']['class'][] = 'hideable-field';
      }
    }
}
/*
 * Function to keeps users on the page from which they click login.
 */
function cbib_oc_hooks_user_login_submit_handler($form, &$form_state) {
  if(isset($_SESSION['ref'])) {
      $current = $_SESSION['ref'];
      unset($_SESSION['ref']);
      drupal_goto(urldecode($current));
  }
  
  
}
/*
 * Function that allow us to prevent sending emails
 * when performing tests on the system.
 * can be controlled from the configuration form.
 */
function cbib_oc_hooks_mail_alter(&$message)
{
  // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
  // We can use variable_get() to get the $conf variable set in our settings.php file
  // Note that by setting the default to TRUE, the default setting for the system is to be
  // a development environment. Set this to FALSE to have the default be a live environment.
  if(variable_get('oc_hooks_prevent_email_dispatch', TRUE))
  {
    // First: Prevent the mail from being sent
    $message['send'] = FALSE;
 
    // Next: Log the mail so it can be debugged if necessary
    watchdog('Development Env', 'The following email was not sent: !message', array('!message' => '<pre>' . print_r($message, TRUE) . '</pre>'));
  }
}
/*
 * Custom callback function to create a live text summary.
 */
function cbib_oc_hooks_js_create_summary()
{
    echo text_summary($_GET['text'],null,300);
    drupal_exit();
}
/**
 * Implements hook_wysiwyg_plugin().
 *
 * @see hook_wysiwyg_plugin()
 */
function cbib_oc_hooks_ckeditor_plugin() {
  return array(
    'confighelper' => array(
      // Name of the plugin used to write it.
      'name' => 'confighelper',
      // Description of the plugin - it would be displayed in the plugins management section of profile settings.
      'desc' => t('Simplify the task of changing some behaviors of CKEditor'),
      // The full path to the CKEditor plugins directory, with the trailing slash.
      'path' => drupal_get_path('module', 'cbib_oc_hooks') . '/js/ckeditor/confighelper/'
    )
  );
}
/*
 * Overwriting user/autocomplete for commons autocompletion
 */
function cbib_oc_hooks_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $or = db_or();
    $or->condition('mail', db_like($string) . '%', 'LIKE');
    $or->condition('name', db_like($string) . '%', 'LIKE');
    $result = db_select('users')->fields('users', array('name','mail'))->condition($or)->range(0, 10)->execute();
    
    foreach ($result as $user) {
      $matches[$user->name] = check_plain($user->name) . " (" . check_plain($user->mail) . ")";
    }
  }
  drupal_json_output($matches);
}
/*
 * Modify OG group admin menu to allow resend of notifcations.
 */
function cbib_oc_hooks_og_ui_get_group_admin($group_type, $gid) {
    $items = array();
    if (og_user_access($group_type, $gid, 'manage members')) {
    $items['resend_notifcation'] = array(
      'title' => t('Resend notification'),
      'description' => t('Resends original creation notifcation ( this will notify all users on the site!!)'),
      'href' => "admin/oc/resend",
    );
  }
  
  return $items;
}
/*
 * Callback that handles triggering the resend of the notification for
 * node creation.
 */
function cbib_oc_hooks_og_resend_notifcation($entity_type,$node_id)
{
    $node = node_load($node_id);
    commons_notify_send_message_on_shutdown($node);
    drupal_set_message(t("Notification er blevet gensendt."));
    drupal_goto(url('node/'. $node->nid));
}
/*
 * Handle resending of news node notifications
 */
function cbib_oc_hooks_node_update($node)
{
    if($node->gensend_notifcation)
    {
       drupal_set_message(t("Notification er blevet gensendt."));
       drupal_register_shutdown_function('commons_notify_send_message_on_shutdown', $node);
    }
}