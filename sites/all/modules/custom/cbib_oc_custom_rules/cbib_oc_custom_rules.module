<?php
/**
 * Implements hook_rules_action_info().
 */
function cbib_oc_custom_rules_rules_action_info() {
  $items = array();

  $items['cbib_oc_custom_rules_get_admin_members'] = array(
    'label' => t('Get group users with admin role'),
    'group' => t('Custom'),
    'parameter' => array(
      'group_content' => array(
        'type' => 'entity',
        'label' => t('Group content'),
        'description' => t('The group content determining the group audience.'),
      ),
    ),
    'provides' => array(
      'group_managers' => array('type' => 'list<user>', 'label' => t('List of subgroup members')),
    ),
    'base' => 'cbib_oc_custom_rules_rules_get_members',
    'access callback' => 'cbib_oc_custom_rules_rules_integration_access',
  );

  return $items;
}


/* NEW FUNCTION ************************************************/

// This callback creates the hashed string by using the parameters provided through rules' UI
function cbib_oc_custom_rules_rules_get_members($group_content) {

if (!isset($group_content->og_membership)) {
    // Not a group content.
    return;
  }

  $members = array();
  foreach ($group_content->og_membership->value() as $og_membership) {
    // Get the group members the group content belongs to.
    $current_members = db_select('og_membership', 'om')
      ->fields('om', array('etid'))
      ->condition('om.gid', $og_membership->gid)
      ->condition('om.group_type', $og_membership->group_type)
      ->condition('om.entity_type', 'user')
      ->execute()
      ->fetchCol();
    $filtered_members = array();
    foreach($current_members as $member)
    {
        $user_roles = og_get_user_roles($og_membership->group_type,$og_membership->gid,$member,false);
        if(array_search(OG_ADMINISTRATOR_ROLE, $user_roles))
        {
            array_push($filtered_members, $member);
        }
    }
    $members = array_merge($members, $filtered_members);
  }

  $members = array_keys(array_flip($members));
  return array('group_managers' => $members);

}

/**
 * OG Rules integration access callback.
 */
function cbib_oc_custom_rules_rules_integration_access($type, $name) {
  // Grant everyone access to conditions.
  return $type == 'condition' || user_access('administer group');
}