<?php

/**
 * @file
 * Jira REST module providing methods for creating, editing,
 * searching JIRA issues out of Drupal via REST.
 */

/**
 * Sets the instance url of jira.
 */
function jira_rest_admin() {

  $form = array();

  $form['jira_rest_jirainstanceurl'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of the JIRA instance'),
    '#default_value' => variable_get('jira_rest_jirainstanceurl', 'https://localhost:8443'),
    '#size' => 80,
    '#description' => t("Enter the URL of your JIRA instance (e.g. https://yourjira.com:8443)"),
    '#required' => TRUE,
  );


  $form['jira_rest_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username of the default user to connect to JIRA'),
    '#default_value' => variable_get('jira_rest_username', '<your username>'),
    '#size' => 80,
    '#description' => t("Enter the username used as default to connect to you JIRA instance (e.g. admin)"),
    '#required' => FALSE,
  );

  $form['jira_rest_password'] = array(
    '#type' => 'password',
    '#title' => t('Password of the default user to connect to JIRA'),
    '#default_value' => variable_get('jira_rest_password', ''),
    '#size' => 80,
    '#description' => t("Enter the password of the default user to connect to JIRA"),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}

/**
 * Validates correct format of url.
 */
function jira_rest_admin_validate($form, &$form_state) {
  $jira_url = $form_state['values']['jira_rest_jirainstanceurl'];
  if ((strpos(strrev($jira_url), strrev('/')) === 0)) {
    form_set_error('jira_rest_jirainstanceurl', t('URL must not end with "/"'));
  }

  //unsets userdata if username left empty
  if (empty($form_state['values']['jira_rest_username'])) {
    unset($form_state['values']['jira_rest_username']);
    variable_del('jira_rest_username');
    unset($form_state['values']['jira_rest_password']);
    variable_del('jira_rest_password');
  }

}


/**
 * Menu entry for administration.
 */
function jira_rest_menu() {

  $items = array();

  $items['admin/config/services/jira_rest'] = array(
    'title' => 'Jira REST',
    'description' => 'Configuration for Jira REST module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jira_rest_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Helper function for getting curl resource.
 */
function jira_rest_get_curl_resource($username, $password, $url) {

  $jira_url = variable_get('jira_rest_jirainstanceurl', 'https://localhost:8443') . '/rest/api/latest';

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $jira_url . $url);
  curl_setopt($ch, CURLOPT_USERPWD, $username . ':' . $password);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);

  return $ch;
}

/**
 * Decodes cURL response.
 */
function jira_rest_curl_execute($ch) {
  $response = curl_exec($ch);
  if($response === FALSE) {
    throw new JiraRestException('Jira offline or no response for this action from Jira.');
  }

  $response_json_decoded = json_decode($response);
  $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);

  switch ($http_code) {
    case '401':
      throw new JiraRestException(t('Jira: 401 Unauthorized!'));
      break;

    case '403':
      throw new JiraRestException(t('Jira: 403 Access Denied!'));
      break;

    default:
      if ($http_code >= 400) {
        throw new JiraRestException(t('Jira: HTTP status code %code , response was %response', array('%code' => $http_code, '%response' => $response)));
      }
      break;

  }

  return $response_json_decoded;
}

/**
 * Searches JIRA issues filtered by the given JQL string.
 *
 * Usage example returning issues not resolved/closed from PROJECTNAME:
 *
 *
 *  $foundissues = jira_rest_searchissue($username, $password,
 * "project=PROJECTNAME&status!=RESOLVED&status!=CLOSED");
 *
 *
 * @param string $username
 *   the Jira username to use for operation
 * @param string $password
 *   the Jira password for the given username
 * @param string $jqlstring
 *   the JQLString (filtering the searched issues)
 * @param int $maxresults
 *   max number of found results that should be returned
 *
 * @return array
 *   the issues found, can be accessed via array->issues
 *   some examples for getting information from a single issue:
 *   $ticketkey = $issue->key;
 *   $parentkey = $issue->fields->parent->key;
 *   $customfielddata = $issue->fields->customfield_10404;
 */
function jira_rest_searchissue($username, $password, $jqlstring, $maxresults = '999') {
  $ch = jira_rest_get_curl_resource($username, $password, "/search?jql=" . urlencode($jqlstring) . "&maxResults=" . $maxresults);
  return jira_rest_curl_execute($ch);
}

/**
 * Returns a full representation of the issue for the given issue key.
 *
 * @see https://docs.atlassian.com/jira/REST/6.2.4/#d2e3822
 *
 * @param string $username
 *   the Jira username to use for operation
 * @param string $password
 *   the Jira password for the given username
 * @param string $issueid_or_key
 *   the issue id or key
 *
 * @return object
 *   an object represanting all metadata for the given id or key
 */
function jira_rest_getfullissue($username, $password, $issueid_or_key) {
    $ch = jira_rest_get_curl_resource($username, $password, "/issue/" . urlencode($issueid_or_key));
    return jira_rest_curl_execute($ch);
}

/**
 * Creates a JIRA issue.
 *
 * example for $issuedata parameter
 *
 *
 *   $issuedata =
 *    array('fields'=>array(
 *     'project'=>array('id'=>$projectid,),
 *     'summary'=>$summary,
 *     'description'=>$description,
 *     'priority'=>array('id'=>$priorityid,),
 *     'issuetype'=>array('id'=>$issuetypeid),
 *     'customfield_xxx'=>$dataforcustomfield,
 *     ),
 *   );
 *
 *
 * @param string $username
 *   the Jira username to use for operation
 * @param string $password
 *   the Jira password for the given username
 * @param object $issuedata
 *   array containing data for issue fields
 *
 * @return object
 *   the issue created
 *   access e.g.
 *   $createdticket_id = $response_obj->id;
 *   $createdticket_key = $response_obj->key;
 */
function jira_rest_createissue($username, $password, $issuedata) {
  $ch = jira_rest_get_curl_resource($username, $password, "/issue/");
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($issuedata));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
  return jira_rest_curl_execute($ch);
}

/**
 * Updates/Edits a JIRA issue.
 *
 *
 *
 * @param string $username
 *   the Jira username to use for operation
 * @param string $password
 *   the Jira password for the given username
 * @param object $issuedata
 *   array containing data for updating/editing issuefields
 * @param string $issuekey
 *   the key string identifying issue to be updated
 *
 * @return object
 *   the issue updated
 */
function jira_rest_updateticket($username, $password, $issuedata, $issuekey) {
  $ch = jira_rest_get_curl_resource($username, $password, "/issue/" . $issuekey);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($issuedata));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
  return jira_rest_curl_execute($ch);
}

/**
 * Attaches files to jira issue.
 * A wrapper function for jira_rest_attachfiletoissue(), extending it's functionality.
 *
 * jira_rest_attachfiletoissue() requires to be in the folder where the file resides during execution otherwise
 * passing a full path e.g. /home/username/file will not upload the file properly.
 * The wrapper function resolves this issue by going inside the file's folder and then uploading it using only the filename.
 *
 * @param $mixed string or array A single full path to file or array of full paths
 * @param $username string The username required for connecting to jira and altering tickets
 * @param $password string The password requried for connecting to jira and altering tickets
 * @param $issuekey_or_id string The jira issue key or id, to which file/files should be attached
 * @param $delete_files boolean If set to true will delete files from disk after successful upload
 * @param $force_delete boolean If set to true will delete files from disk after upload attempt not considering successful or not
 * @return mixed TRUE on successful upload of all files or an array consisting of the failed to upload files
 */
function jira_rest_attachmultiplefilestoissue_absolutepath($mixed, $username, $password, $issuekey_or_id, $delete_files = FALSE, $force_delete = FALSE) {

  $failed = array();

  switch (gettype($mixed)) {
    case 'array':
      foreach ($mixed as $filepath) {
        $response = jira_rest_attachfiletoissue_absolutepath($filepath, $username, $password, $issuekey_or_id, $delete_files, $force_delete);
        if(!$response) {
          $failed[] = $filepath;
        }
      }
      break;
    case 'string':
      $response = jira_rest_attachfiletoissue_absolutepath($mixed, $username, $password, $issuekey_or_id, $delete_files, $force_delete);
      if(!$response) {
        $failed[] = $mixed;
      }
      break;
    default:
      throw new JiraRestException('Not supported parameter type: ' . gettype($mixed));
      break;
  }

  if($failed) {
    return $failed;
  }
  else {
    return TRUE;
  }
}

/**
 * Attaches file to jira issue.
 * A wrapper function for jira_rest_attachfiletoissue(), extending it's functionality.
 *
 * jira_rest_attachfiletoissue() requires to be in the folder where the file resides during execution otherwise
 * passing a full path e.g. /home/username/file will not upload the file properly.
 * The wrapper function resolves this issue by going inside the file's folder and then uploading it using only the filename.
 *
 * @param $filepath string A full path to file
 * @param $username string The username required for connecting to jira and altering tickets
 * @param $password string The password requried for connecting to jira and altering tickets
 * @param $issuekey_or_id string The jira issue key or id, to which file/files should be attached
 * @param $delete_files boolean If set to true will delete file from disk after successful upload
 * @param $force_delete boolean If set to true will delete file from disk after upload attempt not considering successful or not
 * @return boolean On success TRUE, on failure FALSE
 */
function jira_rest_attachfiletoissue_absolutepath($filepath, $username, $password, $issuekey_or_id, $delete_files = FALSE, $force_delete = FALSE){

  if (file_exists($filepath)) {
    //Setting $force_delete implies also removing files when upload successful
    if ($force_delete == TRUE && $delete_files == FALSE) {
      $delete_files = $force_delete;
    }

    //save current php path
    $olddir = getcwd();

    //chdir to folder, in which the pdf resides, otherwise file can't be uploaded using full path
    chdir(dirname($filepath));
    $filename = basename($filepath);

    $ret = FALSE;

    if(jira_rest_attachfiletoissue($username, $password, $filename, $issuekey_or_id)) {
      //delete files after successful upload
      if ($delete_files) {
        if (!unlink($filepath)) {
          throw new JiraRestException(t("Couldn't remove file @pdf from disk on successful upload", array('@pdf' => $filepath)));
        }
      }

      $ret = TRUE;
    }
    else {
      //force delete files after failed upload
      if ($force_delete) {
        if (!unlink($filepath)) {
          throw new JiraRestException(t("Couldn't remove file @pdf from disk on unsuccessful upload", array('@pdf' => $filepath)));
        }
      }
    }

    //go back to origin dir
    chdir($olddir);

    return $ret;

  }
  else {
    throw new JiraRestException("File doesn't exists: $filepath");
  }
}

/**
 * Attaches file to jira issue.
 */
function jira_rest_attachfiletoissue($username, $password, $filename, $issuekey) {
  $ch = jira_rest_get_curl_resource($username, $password, "/issue/" . $issuekey . "/attachments");
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('X-Atlassian-Token: nocheck'));
  curl_setopt($ch, CURLOPT_POSTFIELDS, array('file' => "@$filename"));
  $response = jira_rest_curl_execute($ch);
  if (gettype($response) == 'array' && isset($response[0]->filename) && $response[0]->filename == $filename) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Close issue with resolution 'fixed'.
 */
function jira_rest_closeissuefixed($username, $password, $issuekey, $comment = 'closed by drupal service') {

  $data = array(
    "update" => array('comment' => array(array('add' => array('body' => $comment)))),
    "fields" => array("resolution" => array('name' => 'Fixed')),
    "transition" => array('id' => '2'),
  );

  $ch = jira_rest_get_curl_resource($username, $password, "/issue/" . $issuekey . "/transitions");
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
  return jira_rest_curl_execute($ch);
}

/**
 * Resolve issue with resolution 'fixed'.
 */
function jira_rest_resolveissuefixed($username, $password, $issuekey, $comment = 'resolved by drupal service') {

  $data = array(
    "update" => array('comment' => array(array('add' => array('body' => $comment)))),
    "fields" => array("resolution" => array('name' => 'Fixed')),
    "transition" => array('id' => '5'),
  );


  $ch = jira_rest_get_curl_resource($username, $password, "/issue/" . $issuekey . "/transitions");
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
  jira_rest_curl_execute($ch);
}
